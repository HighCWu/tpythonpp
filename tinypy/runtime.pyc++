import "tp.gen.h"
import <random>
import <fstream>
import <sstream>


#ifdef USE_PYTHON
  extern "C" int PyRun_SimpleString(const char* script);
#endif

#ifdef USE_SDL
  import "module_sdl.h"
#endif

std::mt19937 *__rand_engine = NULL;

def tp_save(TP, const char * fname, tp_obj v):
	FILE *f
	f = fopen(fname,"wb")
	if not f:
		tp_raise(, tp_string_atom(tp, "tp_save IOError: ?"))
	fwrite(tp_string_getptr(v), tp_string_len(v), 1, f)
	fclose(f)

def tp_load(TP, const char * fname) -> tp_obj:
	FILE *f
	long l
	tp_obj r
	char *s
	struct stat stbuf
	stat(fname, &stbuf)
	l = stbuf.st_size
	f = fopen(fname,"rb")
	if not f:
		tp_raise(tp_None,tp_string_atom(tp, "tp_load IOError: ?"))
	r = tp_string_t(tp, l)
	s = tp_string_getptr(r)
	size_t num_elements_read = fread(s, 1, l, f)
	//if (rr !=l) { printf("hmmn: %d %d\n",rr,(int)l); }
	if num_elements_read !=l:
		printf(" - EOF or file read error\n")
	fclose(f)
	return r


def tpy_exists(TP) -> tp_obj:
	char * fname = tp_cstr(tp, TP_STR())
	struct stat stbuf
	tp_obj r = tp_number(!stat(fname, &stbuf))
	tp_free(tp, fname)
	return r

def tpy_load(TP) -> tp_obj:
	char * fname = tp_cstr(tp, TP_STR())
	tp_obj r = tp_load(tp, fname)
	tp_free(tp, fname)
	return r


def tpy_save(TP) -> tp_obj:
	char * fname = tp_cstr(tp, TP_STR())
	tp_obj v = TP_OBJ()
	tp_save(tp, fname, v)
	tp_free(tp, fname)
	return tp_None


def tpy_mtime(TP) -> tp_obj:
	char * fname = tp_cstr(tp, TP_STR())
	struct stat stbuf
	tp_obj r
	if not stat(fname, &stbuf):
		tp_free(tp, fname)
		r = tp_number(stbuf.st_mtime)
		return r
	else:
		tp_free(tp, fname)
		tp_raise(tp_None, tp_string_atom(tp, "tp_mtime IOError: ?"))


/* Function: tp_system
 *
 * The system builtin. A grave security flaw. If your version of tinypy
 * enables this, you better remove it before deploying your app :P
 */
def tpy_system(TP) ->tp_obj:
	char * s = tp_cstr(tp, TP_STR())
	int r = system(s)
	tp_free(tp, s)
	return tp_number(r)

def tp_module_os_init(TP):
	tp_obj os = tp_import(tp, tp_string_atom(tp, "os"), tp_None, tp_string_atom(tp, "<builtin>"));
	tp_set(tp, os, tp_string_atom(tp, "exists"), tp_function(tp, tpy_exists));
	tp_set(tp, os, tp_string_atom(tp, "read"), tp_function(tp, tpy_load));
	tp_set(tp, os, tp_string_atom(tp, "load"), tp_function(tp, tpy_load));
	tp_set(tp, os, tp_string_atom(tp, "system"), tp_function(tp, tpy_system));
	tp_set(tp, os, tp_string_atom(tp, "mtime"), tp_function(tp, tpy_mtime));
	tp_set(tp, os, tp_string_atom(tp, "save"), tp_function(tp, tpy_save));

// CPython integration //
#ifdef USE_PYTHON
import <Python.h>
import "tpc.gen.h"

static std::string __tpc_source_test__ = std::string(R"RAWSTRING(def main(x):
  print(x)
  return x
)RAWSTRING");

def tpc_compile() ->std::string:
	std::cout << __tpc_source_test__ << std::endl;
	PyObject* co = Py_CompileString(__tpc_source_test__.c_str(), "tpc", Py_file_input)
	std::cout << "co: " << co << std::endl
	//PyObject* co = Py_CompileString("def main(a):\n\treturn a+a\n", "tpc", Py_file_input)
	//PyObject* globals = PyDict_New()
	//PyObject* locals = PyDict_New()
	// the code object must be loaded into a module, otherwise it gets garbage collected,
	// PyEval_EvalCode(co, globals, locals) fetching `main` from locals
	// will only work for a function with a single statement
	PyObject* mod = PyImport_ExecCodeModule("__tpc__", co)
	//PyObject* mod = PyEval_EvalCode(co, globals, locals)
	//PyObject* mod = PyRun_String("1+1", Py_eval_input, globals, locals)
	//PyObject* mod = PyRun_String(__tpc_source__.c_str(), Py_file_input, globals, locals)
	//PyObject* mod = PyRun_String("def main(): pass", Py_file_input, globals, locals)
	std::cout << "mod: " << mod << std::endl
	//std::cout << "globals: " << globals << std::endl
	//std::cout << "locals: " << locals << std::endl
	//PyObject* func = PyDict_GetItemString(globals, "main")
	//std::cout << func << std::endl
	//PyObject* func2 = PyDict_GetItemString(locals, "main")
	PyObject* func2 = PyObject_GetAttrString( mod, "main" )
	std::cout << func2 << std::endl
	//PyObject* f = PyEval_CallObject(func2,  Py_BuildValue("(i)", 123))
	PyObject* f = PyObject_Call(func2,  Py_BuildValue("(i)", 123), NULL)
	std::cout << f << std::endl
	return std::string("TODO")

def tpy_cpython_run(TP) ->tp_obj:
	char * s = tp_cstr(tp, TP_STR())
	int r = PyRun_SimpleString(s);  // returns -1 on failure
	tp_free(tp, s)
	return tp_number(r)
/* TODO
tp_obj tpy_cpython_eval(TP) {
	char * s = tp_cstr(tp, TP_STR());
	PyObject *r = PyRun_String(s);  // returns NULL on failure
	tp_free(tp, s);
	return tp_pyobject(r);
}
*/

def tp_module_cpython_init(TP):
	tp_obj py = tp_import(tp, tp_string_atom(tp, "python"), tp_None, tp_string_atom(tp, "<builtin>"))
	tp_set(tp, py, tp_string_atom(tp, "run"), tp_function(tp, tpy_cpython_run))
#endif

def tpy_random(TP) ->tp_obj:
	std::uniform_real_distribution<double> unif(0.0, 1.0);
	double x = unif(*__rand_engine);
	return tp_number(x);

def tpy_uniform(TP) ->tp_obj:
	tp_obj a = TP_OBJ()
	tp_obj b = TP_OBJ()
	std::uniform_real_distribution<double> unif(a.number.val, b.number.val)
	double x = unif(*__rand_engine)
	return tp_number(x)

def tp_module_random_init(TP):
	#ifdef INCLUDEOS
	  __rand_engine = new std::mt19937(time(NULL))
	#else
	  std::random_device rand_dev
	  __rand_engine = new std::mt19937(rand_dev())
	#endif
	tp_obj rand = tp_import(tp, tp_string_atom(tp, "random"), tp_None, tp_string_atom(tp, "<builtin>"))
	tp_set(tp, rand, tp_string_atom(tp, "random"), tp_function(tp, tpy_random))
	tp_set(tp, rand, tp_string_atom(tp, "uniform"), tp_function(tp, tpy_uniform))


#ifdef INCLUDEOS_VGA
TextmodeVGA *__vga__ = NULL
def tpy_vga_init(TP) ->tp_obj:
	__vga__ = &TextmodeVGA::get()
	return None

def tpy_vga_draw(TP) ->tp_obj:
	tp_obj symbol = TP_OBJ()
	tp_obj color = TP_OBJ()
	tp_obj x = TP_OBJ()
	tp_obj y = TP_OBJ()
	if symbol.type.type_id==TP_NUMBER:
		__vga__->put( (char)symbol.number.val, (int8_t)color.number.val, (int8_t)x.number.val, (int8_t)y.number.val)
	else:
		__vga__->put( *tp_string_getptr(symbol), (int8_t)color.number.val, (int8_t)x.number.val, (int8_t)y.number.val)
	return None

def tpy_vga_clear(TP) ->tp_obj:
	__vga__->clear()
	return None

def tp_module_vga_init(TP):
	tp_obj rand = tp_import(tp, tp_string_atom(tp, "vga"), tp_None, tp_string_atom(tp, "<builtin>"))
	tp_set(tp, rand, tp_string_atom(tp, "initialize"), tp_function(tp, tpy_vga_init))
	tp_set(tp, rand, tp_string_atom(tp, "draw"), tp_function(tp, tpy_vga_draw))
	tp_set(tp, rand, tp_string_atom(tp, "clear"), tp_function(tp, tpy_vga_clear))
#endif

#ifdef USE_USER_CUSTOM_CPP
  def module_init(TP);
  import "__user_pythonic__.gen.h"
#endif

def tp_module_corelib_init(TP):
	#ifdef DEBUG
	  std::cout << "runtime.cpp:tp_module_corelib_init" << std::endl
	#endif
	tp_module_os_init(tp)
	tp_module_random_init(tp)
	#ifdef USE_PYTHON
	  tp_module_cpython_init(tp)
	#endif
	#ifdef USE_SDL
	  tp_module_sdl_init(tp)
	#endif
	#ifdef INCLUDEOS_VGA
	  tp_module_vga_init(tp)
	#endif
	#ifdef USE_USER_CUSTOM_CPP
	  #ifdef DEBUG
	    std::cout << "runtime.cpp: module_init USER Pythonic++" << std::endl
	  #endif
	  module_init(tp)
	#endif

## TPYTHON CAPI ##
@export.C
def tpython_run(const char *bytecode, int bc_len):
	#ifdef DEBUG
	  std::cout << "tpython_run..." << std::endl;
	#endif
	tp_vm *tp = tp_init(0, NULL)
	#ifdef DEBUG
	  std::cout << "tp_init OK..." << std::endl;
	#endif
	try:
		tp_import_from_buffer(tp, "__main__", (unsigned char*)bytecode,  bc_len);
	catch (const char * str):
		std::cout << "Runtime Exception: " << str << std::endl;
	tp_deinit(tp)

@export.C
def tpython_run_file(const char *filename):
	std::fstream* f
	std::ostringstream c
	f = new std::fstream(filename, std::fstream::in | std::fstream::binary)
	c << f->rdbuf()
	f->close()
	std::string dat = c.str()
	tpython_run(dat.c_str(), dat.size())


