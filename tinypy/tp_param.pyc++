/* Function: tp_params
 * Initialize the tinypy parameters.
 *
 * When you are calling a tinypy function, you can use this to initialize the
 * list of parameters getting passed to it. Usually, you may want to use
 * <tp_params_n> or <tp_params_v>.
 */
def tp_params(TP) -> tp_obj:
	tp_obj r
	tp->params = tp->_params.list.val->items[tp->cur]
	r = tp->_params.list.val->items[tp->cur]
	r.list.val->len = 0
	return r


/* Function: tp_params_n
 * Specify a list of objects as function call parameters.
 *
 * See also: <tp_params>, <tp_params_v>
 *
 * Parameters:
 * n - The number of parameters.
 * argv - A list of n tinypy objects, which will be passed as parameters.
 *
 * Returns:
 * The parameters list. You may modify it before performing the function call.
 */
def tp_params_n(TP,int n, tp_obj argv[]) -> tp_obj:
	tp_obj r = tp_params(tp)
	if defined(DEBUG):
		print("	calling tp_params_n")
	for (int i=0; i<n; i++):
		tpd_param_list_append(tp, r.list.val, argv[i])
	return r


/* Function: tp_params_v
 * Pass parameters for a tinypy function call.
 * 
 * When you want to call a tinypy method, then you use this to pass parameters
 * to it.
 * 
 * Parameters:
 * n   - The number of variable arguments following.
 * ... - Pass n tinypy objects, which a subsequently called tinypy method will
 *       receive as parameters.
 * 
 * Returns:
 * A tinypy list object representing the current call parameters. You can modify
 * the list before doing the function call.
 */

## not includeOS compatible
##tpythonpp/tinypy/tp_param.gen.cpp:60:45: error: second argument to 'va_arg' is of non-POD type 'tp_obj' [-Wnon-pod-varargs]
##                tpd_list_append(tp, r.list.val, va_arg(a, tp_obj));
##                                                          ^~~~~~
##.conan/data/musl/1.1.18/includeos/stable/package/b6ca6a0ffff110bf17b843d4258482a94281eb43/include/stdarg.h:14:44: note: expanded from
##      macro 'va_arg'
###define va_arg(v,l)     __builtin_va_arg(v,l)
##def tp_params_v(TP,int n,...) -> tp_obj:
##	int i
##	tp_obj r = tp_params(tp)
##	va_list a
##	va_start(a,n)
##	for (i=0; i<n; i++):
##		tpd_list_append(tp, r.list.val, va_arg(a, tp_obj))
##	va_end(a)
##	return r
##

def tp_params_v1(TP, tp_obj a) -> tp_obj:
	tp_obj r = tp_params(tp)
	tpd_param_list_append(tp, r.list.val, a)
	return r

def tp_params_v2(TP, tp_obj a, tp_obj b) -> tp_obj:
	tp_obj r = tp_params(tp)
	tpd_param_list_append(tp, r.list.val, a)
	tpd_param_list_append(tp, r.list.val, b)
	return r

