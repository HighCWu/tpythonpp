/*************************************************************************/
/*                       This file is part of:                           */
/*                           BLENDOT ENGINE                              */
/*                      https://blendot.org                              */
/*************************************************************************/
/* Copyright (c) 2007-2019 Juan Linietsky, Ariel Manzur.                 */
/* Copyright (c) 2014-2019 Godot Engine contributors (cf. AUTHORS.md)    */
/*                                                                       */
/* Permission is hereby granted, free of charge, to any person obtaining */
/* a copy of this software and associated documentation files (the       */
/* "Software"), to deal in the Software without restriction, including   */
/* without limitation the rights to use, copy, modify, merge, publish,   */
/* distribute, sublicense, and/or sell copies of the Software, and to    */
/* permit persons to whom the Software is furnished to do so, subject to */
/* the following conditions:                                             */
/*                                                                       */
/* The above copyright notice and this permission notice shall be        */
/* included in all copies or substantial portions of the Software.       */
/*                                                                       */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
/*************************************************************************/

import "array.h"
import "hashfuncs.h"
import "blendot_object.gen.h"
import "variant.h"
import "vector.h"

class ArrayPrivate:
	SafeRefCount refcount
	Vector<Variant> array

@const
def Array::_ref(const Array &p_from):
	ArrayPrivate *_fp = p_from._p
	ERR_FAIL_COND(!_fp); // should NOT happen.
	if _fp == _p:
		return; // whatever it is, nothing to do here move along
	bool success = _fp->refcount.ref()
	ERR_FAIL_COND(!success); // should really not happen either
	_unref()
	_p = p_from._p

@const
def Array::_unref():
	if not _p:
		return
	if _p->refcount.unref():
		memdelete(_p)
	_p = NULL


def Array::operator[](int p_idx) ->Variant&:
	return _p->array.write[p_idx]

@const
def Array::operator[](int p_idx) ->const Variant&:
	return _p->array[p_idx]

@const
def Array::size() ->int:
	return _p->array.size()

@const
def Array::empty() ->bool:
	return _p->array.empty()


def Array::clear():
	_p->array.clear()

@const
def Array::operator==(const Array &p_array) ->bool:
	return _p == p_array._p

@const
def Array::hash() ->uint32_t:
	uint32_t h = hash_djb2_one_32(0)
	for (int i = 0; i < _p->array.size(); i++):
		h = hash_djb2_one_32(_p->array[i].hash(), h)
	return h

def Array::operator=(const Array &p_array) ->void:
	_ref(p_array)


def Array::push_back(const Variant &p_value):
	_p->array.push_back(p_value)


def Array::resize(int p_new_size) ->Error:
	return _p->array.resize(p_new_size)


def Array::insert(int p_pos, const Variant &p_value):
	_p->array.insert(p_pos, p_value)


def Array::erase(const Variant &p_value):
	_p->array.erase(p_value)

@const
def Array::front() ->Variant:
	ERR_FAIL_COND_V_MSG(_p->array.size() == 0, Variant(), "Can't take value from empty array.")
	return operator[](0)

@const
def Array::back() ->Variant:
	ERR_FAIL_COND_V_MSG(_p->array.size() == 0, Variant(), "Can't take value from empty array.")
	return operator[](_p->array.size() - 1)

@const
def Array::find(const Variant &p_value, int p_from) ->int:
	return _p->array.find(p_value, p_from)

@const
def Array::rfind(const Variant &p_value, int p_from) ->int:
	if _p->array.size() == 0:
		return -1
	if p_from < 0:
		// Relative offset from the end
		p_from = _p->array.size() + p_from
	if p_from < 0 || p_from >= _p->array.size():
		// Limit to array boundaries
		p_from = _p->array.size() - 1
	for (int i = p_from; i >= 0; i--):
		if _p->array[i] == p_value:
			return i
	return -1

@const
def Array::find_last(const Variant &p_value) ->int:
	return rfind(p_value)

@const
def Array::count(const Variant &p_value) ->int:
	if _p->array.size() == 0:
		return 0
	int amount = 0
	for (int i = 0; i < _p->array.size(); i++):
		if _p->array[i] == p_value:
			amount++
	return amount

@const
def Array::has(const Variant &p_value) ->bool:
	return _p->array.find(p_value, 0) != -1


def Array::remove(int p_pos):
	_p->array.remove(p_pos)


def Array::set(int p_idx, const Variant &p_value):
	operator[](p_idx) = p_value

@const
def Array::get(int p_idx) ->const Variant &:
	return operator[](p_idx)

@const
def Array::duplicate(bool p_deep) ->Array:
	Array new_arr
	int element_count = size()
	new_arr.resize(element_count)
	for (int i = 0; i < element_count; i++):
		new_arr[i] = p_deep ? get(i).duplicate(p_deep) : get(i)
	return new_arr


struct _ArrayVariantSort:
	@const
	def operator()(const Variant &p_l, const Variant &p_r) ->bool:
		bool valid = false
		Variant res
		Variant::evaluate(Variant::OP_LESS, p_l, p_r, res, valid)
		if not valid:
			res = false
		return res

def Array::sort() ->Array &:
	_p->array.sort_custom<_ArrayVariantSort>()
	return *this


struct _ArrayVariantSortCustom:
	Object *obj
	StringName func
	@const
	def operator()(const Variant &p_l, const Variant &p_r) ->bool:
		const Variant *args[2] = { &p_l, &p_r };
		Variant::CallError err
		bool res = obj->call(func, args, 2, err)
		if err.error != Variant::CallError::CALL_OK:
			res = false
		return res

def Array::sort_custom(Object *p_obj, const StringName &p_function) ->Array &:
	ERR_FAIL_NULL_V(p_obj, *this)
	SortArray<Variant, _ArrayVariantSortCustom, true> avs
	avs.compare.obj = p_obj
	avs.compare.func = p_function
	avs.sort(_p->array.ptrw(), _p->array.size())
	return *this


def Array::shuffle():
	const int n = _p->array.size()
	if n < 2:
		return
	Variant *data = _p->array.ptrw()
	for (int i = n - 1; i >= 1; i--):
		const int j = Math::rand() % (i + 1)
		const Variant tmp = data[j]
		data[j] = data[i]
		data[i] = tmp

@template(typename Less)
def bisect(const Vector<Variant> &p_array, const Variant &p_value, bool p_before, const Less &p_less) ->int:
	int lo = 0
	int hi = p_array.size()
	if p_before:
		while lo < hi:
			const int mid = (lo + hi) / 2
			if p_less(p_array.get(mid), p_value):
				lo = mid + 1
			else:
				hi = mid
	else:
		while lo < hi:
			const int mid = (lo + hi) / 2
			if p_less(p_value, p_array.get(mid)):
				hi = mid
			else:
				lo = mid + 1
	return lo


def Array::bsearch(const Variant &p_value, bool p_before) ->int:
	return bisect(_p->array, p_value, p_before, _ArrayVariantSort())


def Array::bsearch_custom(const Variant &p_value, Object *p_obj, const StringName &p_function, bool p_before) ->int:
	ERR_FAIL_NULL_V(p_obj, 0)
	_ArrayVariantSortCustom less
	less.obj = p_obj
	less.func = p_function
	return bisect(_p->array, p_value, p_before, less)


def Array::invert() -> Array &:
	_p->array.invert()
	return *this


def Array::push_front(const Variant &p_value):
	_p->array.insert(0, p_value)


def Array::pop_back() ->Variant:
	if not _p->array.empty():
		int n = _p->array.size() - 1
		Variant ret = _p->array.get(n)
		_p->array.resize(n)
		return ret
	return Variant()


def Array::pop_front() ->Variant:
	if not _p->array.empty():
		Variant ret = _p->array.get(0)
		_p->array.remove(0)
		return ret
	return Variant()

@const
def Array::min() ->Variant:
	Variant minval
	for (int i = 0; i < size(); i++):
		if i == 0:
			minval = get(i)
		else:
			bool valid
			Variant ret
			Variant test = get(i)
			Variant::evaluate(Variant::OP_LESS, test, minval, ret, valid)
			if not valid:
				return Variant(); //not a valid comparison
			if bool(ret):
				//is less
				minval = test
	return minval

@const
def Array::max() ->Variant:
	Variant maxval
	for (int i = 0; i < size(); i++):
		if i == 0:
			maxval = get(i)
		else:
			bool valid
			Variant ret
			Variant test = get(i)
			Variant::evaluate(Variant::OP_GREATER, test, maxval, ret, valid)
			if not valid:
				return Variant(); //not a valid comparison
			if bool(ret):
				//is greater
				maxval = test
	return maxval

@const
def Array::id() ->const void*:
	return _p->array.ptr()


def Array::Array(const Array &p_from):
	_p = NULL
	_ref(p_from)


def Array::Array():
	_p = memnew(ArrayPrivate)
	_p->refcount.init()

Array::~Array() { _unref(); }


