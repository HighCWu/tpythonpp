/*************************************************************************/
/*                       This file is part of:                           */
/*                           BLENDOT ENGINE                              */
/*                      https://blendot.org                              */
/*************************************************************************/
/* Copyright (c) 2007-2019 Juan Linietsky, Ariel Manzur.                 */
/* Copyright (c) 2014-2019 Godot Engine contributors (cf. AUTHORS.md)    */
/*                                                                       */
/* Permission is hereby granted, free of charge, to any person obtaining */
/* a copy of this software and associated documentation files (the       */
/* "Software"), to deal in the Software without restriction, including   */
/* without limitation the rights to use, copy, modify, merge, publish,   */
/* distribute, sublicense, and/or sell copies of the Software, and to    */
/* permit persons to whom the Software is furnished to do so, subject to */
/* the following conditions:                                             */
/*                                                                       */
/* The above copyright notice and this permission notice shall be        */
/* included in all copies or substantial portions of the Software.       */
/*                                                                       */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
/*************************************************************************/

import "vector3.h"
import "basis.h"

def Vector3::rotate(const Vector3 &p_axis, real_t p_phi):
	*this = Basis(p_axis, p_phi).xform(*this)

@const
def Vector3::rotated(const Vector3 &p_axis, real_t p_phi) ->Vector3:
	Vector3 r = *this
	r.rotate(p_axis, p_phi)
	return r


def Vector3::set_axis(int p_axis, real_t p_value):
	ERR_FAIL_INDEX(p_axis, 3)
	coord[p_axis] = p_value

@const
def Vector3::get_axis(int p_axis) -> real_t:
	ERR_FAIL_INDEX_V(p_axis, 3, 0)
	return operator[](p_axis)

@const
def Vector3::min_axis() -> int:
	return x < y ? (x < z ? 0 : 2) : (y < z ? 1 : 2)

@const
def Vector3::max_axis() -> int:
	return x < y ? (y < z ? 2 : 1) : (x < z ? 2 : 0)


def Vector3::snap(Vector3 p_val):
	x = Math::stepify(x, p_val.x)
	y = Math::stepify(y, p_val.y)
	z = Math::stepify(z, p_val.z)

@const
def Vector3::snapped(Vector3 p_val) ->Vector3:
	Vector3 v = *this
	v.snap(p_val)
	return v

@const
def Vector3::cubic_interpolaten(const Vector3 &p_b, const Vector3 &p_pre_a, const Vector3 &p_post_b, real_t p_t) ->Vector3:
	Vector3 p0 = p_pre_a
	Vector3 p1 = *this
	Vector3 p2 = p_b
	Vector3 p3 = p_post_b
	with scope:
		//normalize
		real_t ab = p0.distance_to(p1)
		real_t bc = p1.distance_to(p2)
		real_t cd = p2.distance_to(p3)
		if ab > 0:
			p0 = p1 + (p0 - p1) * (bc / ab)
		if cd > 0:
			p3 = p2 + (p3 - p2) * (bc / cd)
	real_t t = p_t
	real_t t2 = t * t
	real_t t3 = t2 * t
	Vector3 out
	out = 0.5 * ((p1 * 2.0) +(-p0 + p2) * t +(2.0 * p0 - 5.0 * p1 + 4 * p2 - p3) * t2 +(-p0 + 3.0 * p1 - 3.0 * p2 + p3) * t3)
	return out

@const
def Vector3::cubic_interpolate(const Vector3 &p_b, const Vector3 &p_pre_a, const Vector3 &p_post_b, real_t p_t) ->Vector3:
	Vector3 p0 = p_pre_a
	Vector3 p1 = *this
	Vector3 p2 = p_b
	Vector3 p3 = p_post_b
	real_t t = p_t
	real_t t2 = t * t
	real_t t3 = t2 * t
	Vector3 out
	out = 0.5 * ((p1 * 2.0) +(-p0 + p2) * t +(2.0 * p0 - 5.0 * p1 + 4 * p2 - p3) * t2 +(-p0 + 3.0 * p1 - 3.0 * p2 + p3) * t3)
	return out

@const
def Vector3::move_toward(const Vector3 &p_to, const real_t p_delta) ->Vector3:
	Vector3 v = *this
	Vector3 vd = p_to - v
	real_t len = vd.length()
	return len <= p_delta || len < CMP_EPSILON ? p_to : v + vd / len * p_delta

@const
def Vector3::operator String():
	return (rtos(x) + ", " + rtos(y) + ", " + rtos(z))


