/*************************************************************************/
/*                       This file is part of:                           */
/*                           BLENDOT ENGINE                              */
/*                      https://blendot.org        b                     */
/*************************************************************************/
/* Copyright (c) 2007-2019 Juan Linietsky, Ariel Manzur.                 */
/* Copyright (c) 2014-2019 Godot Engine contributors (cf. AUTHORS.md)    */
/*                                                                       */
/* Permission is hereby granted, free of charge, to any person obtaining */
/* a copy of this software and associated documentation files (the       */
/* "Software"), to deal in the Software without restriction, including   */
/* without limitation the rights to use, copy, modify, merge, publish,   */
/* distribute, sublicense, and/or sell copies of the Software, and to    */
/* permit persons to whom the Software is furnished to do so, subject to */
/* the following conditions:                                             */
/*                                                                       */
/* The above copyright notice and this permission notice shall be        */
/* included in all copies or substantial portions of the Software.       */
/*                                                                       */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
/*************************************************************************/

#ifndef NODE_H
#define NODE_H

import "class_db.h"
import "map.h"
import "node_path.h"
import "object.h"
import "scene/main/scene_tree.h"

#ifdef BLENDOT
  import "core/project_settings.h"
  import "script_language.h"
#endif

class Viewport;
class SceneState;

class Node( Object ):
	GDCLASS(Node, Object)
	OBJ_CATEGORY("Nodes")
	public:
	enum PauseMode:
		PAUSE_MODE_INHERIT
		PAUSE_MODE_STOP
		PAUSE_MODE_PROCESS
	enum DuplicateFlags:
		DUPLICATE_SIGNALS = 1
		DUPLICATE_GROUPS = 2
		DUPLICATE_SCRIPTS = 4
		DUPLICATE_USE_INSTANCING = 8
		#ifdef TOOLS_ENABLED
		DUPLICATE_FROM_EDITOR = 16
		#endif
	struct Comparator:
		@const
		def operator()(ðŸ”’Node *p_a, ðŸ”’Node *p_b) ->bool:
			return p_b->is_greater_than(p_a)
	struct ComparatorWithPriority:
		@const
		def operator()(ðŸ”’Node *p_a, ðŸ”’Node *p_b) ->bool:
			return p_b->data.process_priority == p_a->data.process_priority ? p_b->is_greater_than(p_a) : p_b->data.process_priority > p_a->data.process_priority
	static int orphan_node_count
	private:
	struct GroupData:
		bool persistent
		SceneTree::Group *group
		def __init__():
			persistent = false
	struct Data.data:
		String filename
		Ref<SceneState> instance_state
		Ref<SceneState> inherited_state
		HashMap<NodePathâ§Ÿint> editable_instances
		Node *parent
		Node *owner
		Vector<Node *> children
		int pos
		int depth
		int blocked
		StringName name
		SceneTree *tree
		bool inside_tree
		//this is a small hack, so if a node is added during _ready() to the tree, it correctly gets the _ready() notification
		bool ready_notified
		bool ready_first
		#ifdef TOOLS_ENABLED
		//path used when imported, used by scene editors to keep tracking
		NodePath import_path
		#endif
		Viewport *viewport
		Map<StringNameâ§ŸGroupData> grouped
		// owned element
		List<Node *>::Element *OW
		List<Node *> owned
		PauseMode pause_mode
		Node *pause_owner
		int network_master
		#ifdef BLENDOT
		Map<StringNameâ§ŸMultiplayerAPI::RPCMode> rpc_methods;
		Map<StringNameâ§ŸMultiplayerAPI::RPCMode> rpc_properties;
		#endif
		// variables used to properly sort the node when processing, ignored otherwise
		//should move all the stuff below to bits
		bool physics_process
		bool idle_process
		int process_priority
		bool physics_process_internal
		bool idle_process_internal
		bool input
		bool unhandled_input
		bool unhandled_key_input
		bool parent_owned
		bool in_constructor
		bool use_placeholder
		bool display_folded
		mutable NodePath *path_cache
	enum NameCasing:
		NAME_CASING_PASCAL_CASE
		NAME_CASING_CAMEL_CASE
		NAME_CASING_SNAKE_CASE
	#ifdef BLENDOT
	Ref<MultiplayerAPI> multiplayer
	#endif
	def _print_tree_pretty(ðŸ”’String &prefix, ðŸ”’bool last);
	def _print_tree(ðŸ”’Node *p_node);
	@const
	def _get_child_by_name(ðŸ”’StringName &p_name) -> Node*;
	def _replace_connections_target(Node *p_new_target);
	def _validate_child_name(Node *p_child, bool p_force_human_readable = false);
	@const
	def _generate_serial_child_name(ðŸ”’Node *p_child, StringName &name);
	def _propagate_reverse_notification(int p_notification);
	def _propagate_deferred_notification(int p_notification, bool p_reverse);
	def _propagate_enter_tree();
	def _propagate_ready();
	def _propagate_exit_tree();
	def _propagate_after_exit_tree();
	def _propagate_validate_owner();
	def _print_stray_nodes();
	def _propagate_pause_owner(Node *p_owner);
	def _get_node_and_resource(ðŸ”’NodePath &p_path) ->Array;
	@const
	def _duplicate_signals(ðŸ”’Node *p_original, Node *p_copy);
	@const
	def _duplicate_and_reown(Node *p_new_parent, ðŸ”’Map<Node*â§ŸNode*> &p_reown_map);
	@const
	def _duplicate(int p_flags, Map<ðŸ”’Node*â§ŸNode*> *r_duplimap = NULL) ->Node*;
	@const
	def _get_children() ->Array;
	@const
	def _get_groups() ->Array;
	def _rpc_bind(ðŸ”’Variant **p_args, int p_argcount, Variant::CallError &r_error) ->Variant;
	def _rpc_unreliable_bind(ðŸ”’Variant **p_args, int p_argcount, Variant::CallError &r_error) ->Variant;
	def _rpc_id_bind(ðŸ”’Variant **p_args, int p_argcount, Variant::CallError &r_error) ->Variant;
	def _rpc_unreliable_id_bind(ðŸ”’Variant **p_args, int p_argcount, Variant::CallError &r_error) ->Variant;
	friend class SceneTree;
	def _set_tree(SceneTree *p_tree);
	#ifdef TOOLS_ENABLED
	friend class SceneTreeEditor;
	#endif
	static String invalid_character
	@static
	def _validate_node_name(String &p_name) ->bool;
	protected:
	def _block():
		data.blocked++
	def _unblock():
		data.blocked--
	def _notification(int p_notification);
	@virtual
	def add_child_notify(Node *p_child);
	@virtual
	def remove_child_notify(Node *p_child);
	@virtual
	def move_child_notify(Node *p_child);
	def _propagate_replace_owner(Node *p_owner, Node *p_by_owner);
	@static
	def _bind_methods();
	@static
	def _get_name_num_separator() ->String;
	friend class SceneState;
	def _add_child_nocheck(Node *p_child, ðŸ”’StringName &p_name);
	def _set_owner_nocheck(Node *p_owner);
	def _set_name_nocheck(ðŸ”’StringName &p_name);
	public:
	enum:
		// you can make your own, but don't use the same numbers as other notifications in other nodes
		NOTIFICATION_ENTER_TREE = 10,
		NOTIFICATION_EXIT_TREE = 11,
		NOTIFICATION_MOVED_IN_PARENT = 12,
		NOTIFICATION_READY = 13,
		NOTIFICATION_PAUSED = 14,
		NOTIFICATION_UNPAUSED = 15,
		NOTIFICATION_PHYSICS_PROCESS = 16,
		NOTIFICATION_PROCESS = 17,
		NOTIFICATION_PARENTED = 18,
		NOTIFICATION_UNPARENTED = 19,
		NOTIFICATION_INSTANCED = 20,
		NOTIFICATION_DRAG_BEGIN = 21,
		NOTIFICATION_DRAG_END = 22,
		NOTIFICATION_PATH_CHANGED = 23,
		//NOTIFICATION_TRANSLATION_CHANGED = 24, moved below
		NOTIFICATION_INTERNAL_PROCESS = 25,
		NOTIFICATION_INTERNAL_PHYSICS_PROCESS = 26,
		NOTIFICATION_POST_ENTER_TREE = 27,
		//keep these linked to node
		NOTIFICATION_WM_MOUSE_ENTER = MainLoop::NOTIFICATION_WM_MOUSE_ENTER,
		NOTIFICATION_WM_MOUSE_EXIT = MainLoop::NOTIFICATION_WM_MOUSE_EXIT,
		NOTIFICATION_WM_FOCUS_IN = MainLoop::NOTIFICATION_WM_FOCUS_IN,
		NOTIFICATION_WM_FOCUS_OUT = MainLoop::NOTIFICATION_WM_FOCUS_OUT,
		NOTIFICATION_WM_QUIT_REQUEST = MainLoop::NOTIFICATION_WM_QUIT_REQUEST,
		NOTIFICATION_WM_GO_BACK_REQUEST = MainLoop::NOTIFICATION_WM_GO_BACK_REQUEST,
		NOTIFICATION_WM_UNFOCUS_REQUEST = MainLoop::NOTIFICATION_WM_UNFOCUS_REQUEST,
		NOTIFICATION_OS_MEMORY_WARNING = MainLoop::NOTIFICATION_OS_MEMORY_WARNING,
		NOTIFICATION_TRANSLATION_CHANGED = MainLoop::NOTIFICATION_TRANSLATION_CHANGED,
		NOTIFICATION_WM_ABOUT = MainLoop::NOTIFICATION_WM_ABOUT,
		NOTIFICATION_CRASH = MainLoop::NOTIFICATION_CRASH,
		NOTIFICATION_OS_IME_UPDATE = MainLoop::NOTIFICATION_OS_IME_UPDATE
	// NODE/TREE //
	@const
	def get_name() ->StringName;
	def set_name(ðŸ”’String &p_name);
	def add_child(Node *p_child, bool p_legible_unique_name = false);
	def add_child_below_node(Node *p_node, Node *p_child, bool p_legible_unique_name = false);
	def remove_child(Node *p_child);
	@const
	def get_child_count() ->int;
	@const
	def get_child(int p_index) ->Node*;
	@const
	def has_node(ðŸ”’NodePath &p_path) ->bool;
	@const
	def get_node(ðŸ”’NodePath &p_path) ->Node*;
	@const
	def get_node_or_null(ðŸ”’NodePath &p_path) ->Node*;
	@const
	def find_node(ðŸ”’String &p_mask, bool p_recursive = true, bool p_owned = true) ->Node*;
	@const
	def has_node_and_resource(ðŸ”’NodePath &p_path) ->bool;
	@const
	def get_node_and_resource(ðŸ”’NodePath &p_path, RES &r_res, Vector<StringName> &r_leftover_subpath, bool p_last_is_property = true) ->Node*;
	@const
	def get_parent() ->Node*;
	@const
	def find_parent(ðŸ”’String &p_mask) ->Node*;
	//_FORCE_INLINE_
	@const
	def get_tree() ->SceneTree*:
		ERR_FAIL_COND_V(!data.tree, NULL)
		return data.tree
	//_FORCE_INLINE_
	@const
	def is_inside_tree() ->bool:
		return data.inside_tree
	@const
	def is_a_parent_of(ðŸ”’Node *p_node) ->bool;
	@const
	def is_greater_than(ðŸ”’Node *p_node) ->bool;
	@const
	def get_path() ->NodePath;
	@const
	def get_path_to(ðŸ”’Node *p_node) ->NodePath;
	@const
	def find_common_parent_with(ðŸ”’Node *p_node) ->Node*;
	def add_to_group(ðŸ”’StringName &p_identifier, bool p_persistent = false);
	def remove_from_group(ðŸ”’StringName &p_identifier);
	@const
	def is_in_group(ðŸ”’StringName &p_identifier) ->bool;
	struct GroupInfo:
		StringName name
		bool persistent
	@const
	def get_groups(List<GroupInfo> *p_groups);
	@const
	def get_persistent_group_count() ->int;
	def move_child(Node *p_child, int p_pos);
	def raise();
	def set_owner(Node *p_owner);
	@const
	def get_owner() ->Node*;
	def get_owned_by(Node *p_by, List<Node *> *p_owned);
	def remove_and_skip();
	@const
	def get_index() ->int;
	def print_tree();
	def print_tree_pretty();
	def set_filename(ðŸ”’String &p_filename);
	@const
	def get_filename() ->String;
	def set_editable_instance(Node *p_node, bool p_editable);
	@const
	def is_editable_instance(ðŸ”’Node *p_node) ->bool;
	def set_editable_instances(ðŸ”’HashMap<NodePathâ§Ÿint> &p_editable_instances);
	@const
	def get_editable_instances() ->HashMap<NodePathâ§Ÿint>;
	/* NOTIFICATIONS */
	def propagate_notification(int p_notification);
	def propagate_call(ðŸ”’StringName &p_method, ðŸ”’Array &p_args = Array(), ðŸ”’bool p_parent_first = false);
	/* PROCESSING */
	def set_physics_process(bool p_process);
	@const
	def get_physics_process_delta_time() ->float;
	@const
	def is_physics_processing() ->bool;
	def set_process(bool p_idle_process);
	@const
	def get_process_delta_time() ->float;
	@const
	def is_processing() ->bool;
	def set_physics_process_internal(bool p_process_internal);
	@const
	def is_physics_processing_internal() ->bool;
	def set_process_internal(bool p_idle_process_internal);
	@const
	def is_processing_internal() ->bool;
	def set_process_priority(int p_priority);
	def set_process_input(bool p_enable);
	@const
	def is_processing_input() ->bool;
	def set_process_unhandled_input(bool p_enable);
	@const
	def is_processing_unhandled_input() ->bool;
	def set_process_unhandled_key_input(bool p_enable);
	@const
	def is_processing_unhandled_key_input() ->bool;
	@const
	def get_position_in_parent() ->int;
	@const
	def duplicate(int p_flags = DUPLICATE_GROUPS | DUPLICATE_SIGNALS | DUPLICATE_SCRIPTS) ->Nodeâ®ž;
	@const
	def duplicate_and_reown(ðŸ”’Mapâ‰¼Nodeâ®žâ§ŸNodeâ®žâ‰½ â¤´p_reown_map) ->Nodeâ®ž;
	#ifdef TOOLS_ENABLED
	@const
	def duplicate_from_editor(Mapâ‰¼ðŸ”’Nodeâ®žâ§ŸNodeâ®žâ‰½ â¤´r_duplimap) ->Nodeâ®ž;
	#endif
	//Node *clone_tree() const;
	// used by editors, to save what has changed only
	def set_scene_instance_state(ðŸ”’Refâ‰¼SceneStateâ‰½ â¤´p_state);
	@const
	def get_scene_instance_state() -> Refâ‰¼SceneStateâ‰½;
	def set_scene_inherited_state(ðŸ”’Refâ‰¼SceneStateâ‰½ â¤´p_state);
	@const
	def get_scene_inherited_state() -> Refâ‰¼SceneStateâ‰½;
	def set_scene_instance_load_placeholder(bool p_enable);
	@const
	def get_scene_instance_load_placeholder() -> bool;
	@static
	def make_binds(VARIANT_ARG_LIST) ->Vector<Variant>;
	def replace_by(Node *p_node, bool p_keep_data = false);
	def set_pause_mode(PauseMode p_mode);
	@const
	def get_pause_mode() ->PauseMode;
	@const
	def can_process() ->bool;
	@const
	def can_process_notification(int p_what) ->bool;
	def request_ready();
	@static
	def print_stray_nodes();
	#ifdef TOOLS_ENABLED
	def validate_child_name(Node *p_child) -> String;
	#endif
	def queue_delete();
	//hacks for speed
	@static
	def set_human_readable_collision_renaming(bool p_enabled);
	@static
	def init_node_hrcr();
	def force_parent_owned():
		//hack to avoid duplicate nodes
		data.parent_owned = true
	//path used when imported, used by scene editors to keep tracking
	def set_import_path(const NodePath &p_import_path);
	@const
	def get_import_path() -> NodePath;
	@const
	def is_owned_by_parent() ->bool;
	@const
	def get_argument_options(ðŸ”’StringName &p_function, int p_idx, List<String> *r_options);
	def clear_internal_tree_resource_paths();
	//_FORCE_INLINE_
	@const
	def get_viewport() ->Viewport *:
		return data.viewport
	@virtual
	@const
	def get_configuration_warning() ->String;
	def update_configuration_warning();
	def set_display_folded(bool p_folded);
	@const
	def is_displayed_folded() ->bool;
	/* NETWORK */
	def set_network_master(int p_peer_id, bool p_recursive = true);
	@const
	def get_network_master() ->int;
	@const
	def is_network_master() ->bool;
	#ifdef BLENDOT
	// config a local method for RPC
	def rpc_config(ðŸ”’StringName &p_method, MultiplayerAPI::RPCMode p_mode);
	// config a local property for RPC
	def rset_config(ðŸ”’StringName &p_property, MultiplayerAPI::RPCMode p_mode);
	#endif
	//rpc call, honors RPCMode
	def rpc(ðŸ”’StringName &p_method, VARIANT_ARG_LIST);
	//rpc call, honors RPCMode
	def rpc_unreliable(ðŸ”’StringName &p_method, VARIANT_ARG_LIST);
	//rpc call, honors RPCMode
	def rpc_id(int p_peer_id, ðŸ”’StringName &p_method, VARIANT_ARG_LIST);
	//rpc call, honors RPCMode
	def rpc_unreliable_id(int p_peer_id, ðŸ”’StringName &p_method, VARIANT_ARG_LIST);
	//remote set call, honors RPCMode
	def rset(ðŸ”’StringName &p_property, ðŸ”’Variant &p_value);
	//remote set call, honors RPCMode
	def rset_unreliable(ðŸ”’StringName &p_property, ðŸ”’Variant &p_value);
	//remote set call, honors RPCMode
	def rset_id(int p_peer_id, ðŸ”’StringName &p_property, ðŸ”’Variant &p_value);
	//remote set call, honors RPCMode
	def rset_unreliable_id(int p_peer_id, ðŸ”’StringName &p_property, ðŸ”’Variant &p_value);
	def rpcp(int p_peer_id, bool p_unreliable, ðŸ”’StringName &p_method, ðŸ”’Variant **p_arg, int p_argcount);
	def rsetp(int p_peer_id, bool p_unreliable, ðŸ”’StringName &p_property, ðŸ”’Variant &p_value);
	#ifdef BLENDOT
	@const
	def get_multiplayer() ->Ref<MultiplayerAPI>;
	@const
	def get_custom_multiplayer() ->Ref<MultiplayerAPI>;
	def set_custom_multiplayer(Ref<MultiplayerAPI> p_multiplayer);
	def get_node_rpc_mode(ðŸ”’ StringName &p_method) -> const Map<StringNameâ§ŸMultiplayerAPI::RPCMode>::Element*;
	def get_node_rset_mode(ðŸ”’ StringName &p_property) -> const Map<StringNameâ§ŸMultiplayerAPI::RPCMode>::Element*;
	#endif
	Node();
	~Node();


VARIANT_ENUM_CAST(Node::DuplicateFlags);
typedef Set<Node*â§ŸNode::Comparator> NodeSet;

#endif
