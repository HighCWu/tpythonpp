/*************************************************************************/
/*                       This file is part of:                           */
/*                           BLENDOT ENGINE                              */
/*                      https://blendot.org                              */
/*************************************************************************/
/* Copyright (c) 2007-2019 Juan Linietsky, Ariel Manzur.                 */
/* Copyright (c) 2014-2019 Godot Engine contributors (cf. AUTHORS.md)    */
/*                                                                       */
/* Permission is hereby granted, free of charge, to any person obtaining */
/* a copy of this software and associated documentation files (the       */
/* "Software"), to deal in the Software without restriction, including   */
/* without limitation the rights to use, copy, modify, merge, publish,   */
/* distribute, sublicense, and/or sell copies of the Software, and to    */
/* permit persons to whom the Software is furnished to do so, subject to */
/* the following conditions:                                             */
/*                                                                       */
/* The above copyright notice and this permission notice shall be        */
/* included in all copies or substantial portions of the Software.       */
/*                                                                       */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
/*************************************************************************/

import "transform.h"
import "math_funcs.h"
import "copymem.h"
import "print_string.h"

def Transform::affine_invert():
	basis.invert()
	origin = basis.xform(-origin)

@const
def Transform::affine_inverse() ->Transform:
	Transform ret = *this
	ret.affine_invert()
	return ret


def Transform::invert():
	basis.transpose()
	origin = basis.xform(-origin)

@const
def Transform::inverse() ->Transform:
	// FIXME: this function assumes the basis is a rotation matrix, with no scaling.
	// Transform::affine_inverse can handle matrices with scaling, so GDScript should eventually use that.
	Transform ret = *this
	ret.invert()
	return ret


def Transform::rotate(const Vector3 &p_axis, real_t p_phi):
	*this = rotated(p_axis, p_phi)

@const
def Transform::rotated(const Vector3 &p_axis, real_t p_phi) ->Transform:
	return Transform(Basis(p_axis, p_phi), Vector3()) * (*this)


def Transform::rotate_basis(const Vector3 &p_axis, real_t p_phi):
	basis.rotate(p_axis, p_phi)

@const
def Transform::looking_at(const Vector3 &p_target, const Vector3 &p_up) ->Transform:
	Transform t = *this
	t.set_look_at(origin, p_target, p_up)
	return t


def Transform::set_look_at(const Vector3 &p_eye, const Vector3 &p_target, const Vector3 &p_up):
	#ifdef MATH_CHECKS
	  ERR_FAIL_COND(p_eye == p_target)
	  ERR_FAIL_COND(p_up.length() == 0)
	#endif
	// Reference: MESA source code
	Vector3 v_x, v_y, v_z
	/* Make rotation matrix */
	/* Z vector */
	v_z = p_eye - p_target
	v_z.normalize()
	v_y = p_up
	v_x = v_y.cross(v_z)
	#ifdef MATH_CHECKS
	  ERR_FAIL_COND(v_x.length() == 0)
	#endif
	/* Recompute Y = Z cross X */
	v_y = v_z.cross(v_x)
	v_x.normalize()
	v_y.normalize()
	basis.set(v_x, v_y, v_z)
	origin = p_eye

@const
def Transform::interpolate_with(const Transform &p_transform, real_t p_c) ->Transform:
	/* not sure if very "efficient" but good enough? */
	Vector3 src_scale = basis.get_scale()
	Quat src_rot = basis.get_rotation_quat()
	Vector3 src_loc = origin
	Vector3 dst_scale = p_transform.basis.get_scale()
	Quat dst_rot = p_transform.basis.get_rotation_quat()
	Vector3 dst_loc = p_transform.origin
	Transform interp
	interp.basis.set_quat_scale(src_rot.slerp(dst_rot, p_c).normalized(), src_scale.linear_interpolate(dst_scale, p_c))
	interp.origin = src_loc.linear_interpolate(dst_loc, p_c)
	return interp


def Transform::scale(const Vector3 &p_scale):
	basis.scale(p_scale)
	origin *= p_scale

@const
def Transform::scaled(const Vector3 &p_scale) ->Transform:
	Transform t = *this
	t.scale(p_scale)
	return t


def Transform::scale_basis(const Vector3 &p_scale):
	basis.scale(p_scale)


def Transform::translate(real_t p_tx, real_t p_ty, real_t p_tz):
	translate(Vector3(p_tx, p_ty, p_tz))


def Transform::translate(const Vector3 &p_translation):
	for (int i = 0; i < 3; i++):
		origin[i] += basis[i].dot(p_translation)


@const
def Transform::translated(const Vector3 &p_translation) ->Transform:
	Transform t = *this
	t.translate(p_translation)
	return t


def Transform::orthonormalize():
	basis.orthonormalize()

@const
def Transform::orthonormalized() ->Transform:
	Transform _copy = *this
	_copy.orthonormalize()
	return _copy

@const
def Transform::operator==(const Transform &p_transform) ->bool:
	return (basis == p_transform.basis && origin == p_transform.origin)

@const
def Transform::operator!=(const Transform &p_transform) ->bool:
	return (basis != p_transform.basis || origin != p_transform.origin)


def Transform::operator*=(const Transform &p_transform) ->void:
	origin = xform(p_transform.origin)
	basis *= p_transform.basis

@const
def Transform::operator*(const Transform &p_transform) ->Transform:
	Transform t = *this
	t *= p_transform
	return t

@const
def Transform::operator String():
	#ifdef BLENDOT
	return basis.operator String() + " - " + origin.operator String();
	#endif


Transform::Transform(const Basis &p_basis, const Vector3 &p_origin) : basis(p_basis), origin(p_origin) {}

Transform::Transform(real_t xx, real_t xy, real_t xz, real_t yx, real_t yy, real_t yz, real_t zx, real_t zy, real_t zz, real_t ox, real_t oy, real_t oz) {
  basis = Basis(xx, xy, xz, yx, yy, yz, zx, zy, zz);
  origin = Vector3(ox, oy, oz);
}


