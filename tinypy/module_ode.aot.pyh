__is_ode_init = False

class world( object ):
	def __wpointer__(self) ->dxWorld*:
		return unwrap(dxWorld, self.__wptr__)
	def setGravity(self, v):
		dWorldSetGravity( self.__wpointer__(), v[0], v[1], v[2] )
	def step(self, dt):
		dWorldStep( unwrap(dxWorld, self.__wptr__), dt )
	def __init__(self):
		global __is_ode_init
		if not __is_ode_init:
			dInitODE()
			__is_ode_init = True
		self.__wptr__ = dWorldCreate()

class mass( object ):
	def __mpointer__(self) ->dMass*:
		return unwrap(dMass, self.__mptr__)
	def setSphere(self, density, radius):
		dMassSetSphere( self.__mpointer__(), density, radius )
	def __init__(self):
		self.__mptr__  = new dMass()

class body( object ):
	def __bpointer__(self) ->dxBody*:
		return unwrap(dxBody, self.__bptr__)
	def setMass(self, mass):
		dBodySetMass( self.__bpointer__(), mass.__mpointer__() )
	def setPosition(self, v):
		dBodySetPosition( self.__bpointer__(), v[0],v[1],v[2] )
	def addForce(self, vec):
		dBodyAddForce( self.__bpointer__(), vec[0], vec[1], vec[2] )
	def getPosition(self):
		p = dBodyGetPosition( self.__bpointer__() )
		return vec3(p[0], p[1], p[2])
	def getRotation(self):
		p = dBodyGetQuaternion( self.__bpointer__() )
		return quat(p[0], p[1], p[2], p[3])
	def __init__(self, w):
		self.__bptr__ = dBodyCreate( w.__wpointer__() )




