__is_ode_init = False

class world( object ):
	def __wpointer__(self) ->dxWorld*:
		return unwrap(dxWorld, self.__wptr__)
	def setGravity(self, v):
		dWorldSetGravity( self.__wpointer__(), v[0], v[1], v[2] )
	def step(self, dt):
		dWorldStep( unwrap(dxWorld, self.__wptr__), dt )
	def __init__(self):
		global __is_ode_init
		if not __is_ode_init:
			dInitODE()
			__is_ode_init = True
		self.__wptr__ = dWorldCreate()

class mass( object ):
	def __mpointer__(self) ->dMass*:
		return unwrap(dMass, self.__mptr__)
	def setSphere(self, density, radius):
		dMassSetSphere( self.__mpointer__(), density, radius )
	def __init__(self):
		self.__mptr__  = new dMass()

class body( object ):
	def __bpointer__(self) ->dxBody*:
		return unwrap(dxBody, self.__bptr__)
	def setMass(self, mass):
		dBodySetMass( self.__bpointer__(), mass.__mpointer__() )
	def setPosition(self, v):
		dBodySetPosition( self.__bpointer__(), v[0],v[1],v[2] )
	def addForce(self, vec):
		dBodyAddForce( self.__bpointer__(), vec[0], vec[1], vec[2] )
	def addRelForce(self, vec):
		dBodyAddRelForce( self.__bpointer__(), vec[0], vec[1], vec[2] )
	def addTorque(self, vec):
		dBodyAddTorque( self.__bpointer__(), vec[0], vec[1], vec[2] )
	def addRelTorque(self, vec):
		dBodyAddRelTorque( self.__bpointer__(), vec[0], vec[1], vec[2] )
	def getPosition(self):
		print(self.__bpointer__())
		p = dBodyGetPosition( self.__bpointer__() )
		return vec3(p[0], p[1], p[2])
	def setRotation(self, qd):
		dQuaternion q
		q[0] = qd[3]
		q[1] = qd[0]
		q[2] = qd[1]
		q[3] = qd[2]
		#dBodySetQuaternion( self.__bpointer__(), q )
		dMatrix3 r
		dRfromQ( r, q )
		dBodySetRotation( self.__bpointer__(), r )
	def getRotation(self):
		#print(self.__bpointer__())
		#ptr = self.__bpointer__()
		#std::cout << "RAW: " << ptr->q[0] << ',' << ptr->q[1] << ','<< ptr->q[2] << ','<< ptr->q[3] << std::endl;
		#p = dBodyGetQuaternion( self.__bpointer__() )
		# note dQfromR is declared in ode_rotation.hpp
		volatile dQuaternion p
		dQfromR( (float*)p, dBodyGetRotation( self.__bpointer__() ) )
		x = p[1]
		y = p[2]
		z = p[3]
		w = p[0]
		#return quat(p[1], p[2], p[3], p[0])
		return quat(x,y,z, w)
		#dBodyCopyQuaternion( self.__bpointer__(), q )		
		#return quat(q[1], q[2], q[3], q[0])
	def getLinearVel(self):
		p = dBodyGetLinearVel( self.__bpointer__() )
		return vec3(p[0], p[1], p[2])
	def getAngularVel(self):
		p = dBodyGetAngularVel( self.__bpointer__() )
		return vec3(p[0], p[1], p[2])
	def __init__(self, w):
		self.__bptr__ = dBodyCreate( w.__wpointer__() )




