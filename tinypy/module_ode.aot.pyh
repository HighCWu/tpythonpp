__is_ode_init = False
static dWorldID __world__
static std::vector<dxJoint*> __contact_joints__

############################## from ode.cpp ####################################


#void addObjectToList (dObject *obj, dObject **first)
#{
#	obj->next = *first;
#	obj->tome = first;
#	if (*first) (*first)->tome = &obj->next;
#	(*first) = obj;
#}


# remove the object from the linked list
@static
def __removeObjectFromList(dObject *obj) ->void:
	if (obj->next) obj->next->tome = obj->tome;
	*(obj->tome) = obj->next;
	# safeguard
	obj->next = NULL;
	obj->tome = NULL;


# remove the joint from neighbour lists of all connected bodies
@static
def __removeJointReferencesFromAttachedBodies(dxJoint *j) ->void:
	for (int i=0; i<2; i++):
		dxBody *body = j->node[i].body;
		if body:
			dxJointNode *n = body->firstjoint;
			dxJointNode *last = NULL;
			while n:
				if n->joint == j:
					if (last) last->next = n->next;
					else body->firstjoint = n->next;
					break;
				last = n;
				n = n->next;
	j->node[0].body = NULL;
	j->node[0].next = NULL;
	j->node[1].body = NULL;
	j->node[1].next = NULL;


@static
def __FinalizeAndDestroyJointInstance(dxJoint *j, bool delete_it) ->void:
	# if any group joints have their world pointer set to 0, their world was
	# previously destroyed. no special handling is required for these joints.
	if j->world != NULL:
		__removeJointReferencesFromAttachedBodies(j)
		__removeObjectFromList(j)
		j->world->nj--
	if delete_it:
		delete j
	else:
		j->~dxJoint()

################################################################################

@static
def __delete_contact_joints() ->void:
	if __contact_joints__.size():
		for i in range( __contact_joints__.size() ):
			joint = __contact_joints__[i]
			__FinalizeAndDestroyJointInstance(joint, true)
		__contact_joints__.clear()

@static
def __nearCallback(void* ptr, dxGeom* o1, dxGeom* o2) ->void:
	if defined(DEBUG):
		print("=======nearCallback geoms:")
		print(o1)
		print(o2)
	b1 = o1->body
	b2 = o2->body
	if defined(DEBUG):
		print("=======nearCallback bodies:")
		print(b1)
		print(b2)
	const int N = 10
	dContact cons[N]
	for i in range(N):
		cons[i].surface.mode = dContactSoftCFM | dContactApprox1
		## TODO options for bounce and other surface modes
		#cons[i].surface.mode = dContactSoftCFM | dContactBounce | dContactSoftERP | dContactMu2 | dContactRolling
		#cons[i].surface.mode = dContactSoftCFM | dContactSoftERP | dContactMu2 | dContactRolling
		cons[i].surface.soft_erp   = 0.9
		cons[i].surface.mu   = 0.9
		cons[i].surface.bounce   = 0.01
		cons[i].surface.bounce_vel   = 0.05
		##cons[i].surface.soft_cfm = 0.2
		cons[i].surface.soft_cfm = 0.1
	hits = dCollide(o1, o2, N, &cons[0].geom, sizeof(dContact))
	if hits > 0:
		for i in range( hits ):
			#coj = dJointCreateContact(__world__, __contactgroup__, cons+i)
			## createJoint is just a template function defined in ode.cpp
			#coj = (dxJointContact *)createJoint<dxJointContact>(__world__,NULL);
			coj = new dxJointContact(__world__)
			coj->contact = *(cons+i);
			if defined(DEBUG):
				print("=======nearCallback contact joint:")
				print(coj)
			dJointAttach(coj, b1, b2)
			__contact_joints__.push_back(coj)


class world( object ):
	def __wpointer__(self) ->dxWorld*:
		return unwrap(dxWorld, self.__wptr__)
	def setGravity(self, v):
		dWorldSetGravity( self.__wpointer__(), v[0], v[1], v[2] )
	def step(self, dt):
		dWorldStep( unwrap(dxWorld, self.__wptr__), dt )
	def __init__(self):
		global __is_ode_init, __world__
		if not __is_ode_init:
			dInitODE()
			__is_ode_init = True
			__world__ = dWorldCreate()
			#dWorldSetGravity( __world__, g[0],g[1],g[2] )
			dWorldSetContactMaxCorrectingVel(__world__, 2000.0)
			self.__wptr__ = __world__
		else:
			print("only a single ODE world is allowed for now")

class mass( object ):
	def __mpointer__(self) ->dMass*:
		return unwrap(dMass, self.__mptr__)
	def setSphere(self, density, radius):
		dMassSetSphere( self.__mpointer__(), density, radius )
	def __init__(self):
		ptr = new dMass()
		#dMassSetSphere( ptr, density, radius )
		self.__mptr__  = ptr

class body( object ):
	def __bpointer__(self) ->dxBody*:
		return unwrap(dxBody, self.__bptr__)
	def setMass(self, mass):
		dBodySetMass( self.__bpointer__(), mass.__mpointer__() )
	def setPosition(self, v):
		dBodySetPosition( self.__bpointer__(), v[0],v[1],v[2] )
	def addForce(self, vec):
		dBodyAddForce( self.__bpointer__(), vec[0], vec[1], vec[2] )
	def addRelForce(self, vec):
		dBodyAddRelForce( self.__bpointer__(), vec[0], vec[1], vec[2] )
	def addTorque(self, vec):
		dBodyAddTorque( self.__bpointer__(), vec[0], vec[1], vec[2] )
	def addRelTorque(self, vec):
		dBodyAddRelTorque( self.__bpointer__(), vec[0], vec[1], vec[2] )
	def getPosition(self):
		p = dBodyGetPosition( self.__bpointer__() )
		if std::isnan(p[0]):
			raise RuntimeError("body.getPosition NAN error")
		return vec3(p[0], p[1], p[2])
	def setRotation(self, qd):
		dQuaternion q
		q[0] = qd[3]
		q[1] = qd[0]
		q[2] = qd[1]
		q[3] = qd[2]
		#dBodySetQuaternion( self.__bpointer__(), q )
		dMatrix3 r
		dRfromQ( r, q )
		dBodySetRotation( self.__bpointer__(), r )
	def getRotation(self):
		#print(self.__bpointer__())
		#ptr = self.__bpointer__()
		#std::cout << "RAW: " << ptr->q[0] << ',' << ptr->q[1] << ','<< ptr->q[2] << ','<< ptr->q[3] << std::endl;
		#p = dBodyGetQuaternion( self.__bpointer__() )
		# note dQfromR is declared in ode_rotation.hpp
		dQuaternion p
		dQfromR( p, dBodyGetRotation( self.__bpointer__() ) )
		x = p[1]
		y = p[2]
		z = p[3]
		w = p[0]
		#return quat(p[1], p[2], p[3], p[0])
		return quat(x,y,z, w)
		#dBodyCopyQuaternion( self.__bpointer__(), q )		
		#return quat(q[1], q[2], q[3], q[0])
	def getLinearVel(self):
		p = dBodyGetLinearVel( self.__bpointer__() )
		return vec3(p[0], p[1], p[2])
	def getAngularVel(self):
		p = dBodyGetAngularVel( self.__bpointer__() )
		return vec3(p[0], p[1], p[2])
	def __init__(self, w):
		b = dBodyCreate( w.__wpointer__() )
		## bodies already have some default mass set by ODE
		#m = dMass()
		#dMassSetSphere( &m, 0.25, 1.0 )
		#dBodySetMass( b, &m )
		## linear damping, angular damping
		dBodySetDamping(b, 0.1, 0.1)
		dBodySetMaxAngularSpeed(b, 100)
		self.__bptr__ = b


class space( object ):
	def __spointer__(self) ->dxSpace*:
		return unwrap(dxSpace, self.__sptr__)
	def spaceCollide(self):
		__delete_contact_joints()
		dSpaceCollide( self.__spointer__(), 0, &__nearCallback)
	def __init__(self):
		self.__sptr__ = dSimpleSpaceCreate(0)


class __ode_geom_base__( object ):
	def __gpointer__(self) ->dxGeom*:
		return unwrap(dxGeom, self.__gptr__)
	def setBody(self, b):
		dGeomSetBody( self.__gpointer__(), b.__bpointer__())
	def __init__(self):
		self.__gptr__ = None


class geomPlane( __ode_geom_base__ ):
	def __init__(self, sp, nor, dist):
		self.__gptr__ = dCreatePlane( sp.__spointer__(), nor[0], nor[1], nor[2], dist)

class geomBox( __ode_geom_base__ ):
	def __init__(self, sp, bx):
		self.__gptr__ = dCreateBox( sp.__spointer__(), bx[0], bx[1], bx[2])










