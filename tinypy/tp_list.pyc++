
def tp_list_nt(TP) ->tp_obj:
	tp_obj r = {TP_LIST};
	r.list.val = tpd_list_new(tp)
	return r


def tp_list_t(TP) ->tp_obj:
	return tp_track(tp, tp_list_nt(tp))

def tp_list(TP) ->tp_obj:
	return tp_track(tp, tp_list_nt(tp))

def tp_list() ->tp_obj:
	tp_obj r = {TP_LIST};
	r.list.val = tpd_list_new()
	return r


def tp_list_from_items(TP, int n, tp_obj *argv) ->tp_obj:
	tp_obj r = tp_list_t(tp)
	tpd_list_realloc(tp, r.list.val,n)
	for (int i=0; i<n; i++):
		tpd_list_append(tp, r.list.val, argv[i])
	return r

def tp_list_from_items_nt(TP, int n, tp_obj *argv) ->tp_obj:
	tp_obj r = tp_list_nt(tp)
	r.type.magic = TP_SKIP_GC_MAGIC
	tpd_list_realloc(tp, r.list.val,n)
	for (int i=0; i<n; i++):
		tpd_list_append(tp, r.list.val, argv[i])
	return r


## C API for lists
def tp_list_copy(TP, tp_obj rr) ->tp_obj:
	tp_check_type(tp, TP_LIST, rr)
	tp_obj lst = tp_list(tp)
	##tp_obj val = {TP_LIST};
	##tpd_list *r = tpd_list_new(tp)
	## *** Error in `./tpython++': double free or corruption (fasttop): 0x00000000021141d0 ***
	##tpd_list *o = rr.list.val
	##*r = *o; r->gci = 0
	##if rr.list.val->type <= 0:
	##	r->alloc = o->len
	##	r->items = (tp_obj*)tp_malloc(tp, sizeof(tp_obj)*o->len)
	##	memcpy(r->items,o->items,sizeof(tp_obj)*o->len)
	##val.list.val = r
	##return tp_track(tp, val)
	for (int i=0; i<rr.list.val->len; i++):
		tpd_list_append(tp, lst.list.val, rr.list.val->items[i])
	return tp_track(tp, lst)


def tp_list_add(TP, tp_obj a, tp_obj b) ->tp_obj:
	tp_obj r
	r = tp_list_copy(tp, a)
	tpd_list_extend(tp, r.list.val, b.list.val)
	return r


def tp_list_mul(TP, tp_obj a, int n) ->tp_obj:
	tp_obj r
	r = tp_list_copy(tp, a)
	for (int i = 1; i < n; i ++):
		tpd_list_extend(tp, r.list.val, a.list.val)
	return r


def tp_list_cmp(TP, tp_obj a, tp_obj b) ->int:
	int n, v
	for (n=0; n<_tp_min(a.list.val->len, b.list.val->len); n++):
		tp_obj aa = a.list.val->items[n]
		tp_obj bb = b.list.val->items[n]
		v = tp_cmp(tp, aa, bb)
		if v:
			return v
	return a.list.val->len - b.list.val->len

