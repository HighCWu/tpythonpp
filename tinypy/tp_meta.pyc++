
def _tp_lookup_(TP, tp_obj self, int hash, tp_obj k, tp_obj *member, int bind, int depth) ->int:
	tp_obj meta
	if self.type.type_id == TP_INTERFACE:
		meta = self.dict.val->meta
	elif self.type.type_id < TP_HAS_META:
		return 0
	else:
		## shouldn't this be self.dict.val->meta ?
		meta = self.obj.info->meta
	//this was incorrect, it should also search objects, how did this get broken?
	//if(self.type.type_id == TP_INTERFACE) {
	## if we land on a class or an object, try to find the member directly
	if self.type.type_id == TP_INTERFACE || self.type.type_id == TP_OBJECT:
		if defined(DEBUG):
			print("_tp_lookup_ on interface or object")
		## first do a dict look up from the object itself
		int n = tpd_dict_hashfind(tp, self.dict.val, hash, k)
		if n != -1:
			*member = self.dict.val->items[n].val
			return 1
		else:
			#ifdef DEBUG
			print("_tp_lookup_ on interface or object FAILED!")
			#endif
	## no meta
	if meta.type.type_id == TP_NONE:
		return 0
	if depth == 8:
		//tp_raise(0,tp_string_atom(tp, "(tp_lookup) RuntimeError: maximum lookup depth exceeded"));
		throw "RuntimeError in tp_meta.cpp: maximum lookup depth exceeded"
	if meta.type.type_id != TP_INTERFACE:
		//tp_raise(0,tp_string_atom(tp, "(tp_lookup) RuntimeError: meta is neither an interface nor None"));
		throw "RuntimeError in tp_meta.cpp: meta is neither an interface nor None"
	## nested lookup always bind
	int nextbind = 1
	if _tp_lookup_(tp, meta, hash, k, member, nextbind, depth + 1):
		## bind as a member ?
		if not bind:
			return 1
		## FIXME: this will unbind the existing binding. should have nested.
		if member->type.type_id == TP_FUNC:
			## an object is seen, bind the meta method to the instance
			## object, dict or string, or list
			if self.type.type_id == TP_DICT || self.type.type_id == TP_OBJECT:
				*member = tp_bind(tp, *member, self)
		return 1
	return 0


def tp_vget(TP, tp_obj self, tp_obj k, tp_obj * member, int bind) ->int:
	int n = 0
	int hash = tp_hash(tp, k)
	if defined(DEBUG):
		std::cout << "tp_vget: key=" << k << " hash=" << hash << std::endl;
	if self.type.type_id == TP_OBJECT:
		n = tpd_dict_hashfind(tp, self.dict.val->meta.dict.val, hash, k)
		if n != -1:
			*member = self.dict.val->meta.dict.val->items[n].val
			if member->type.type_id == TP_FUNC:
				*member = tp_bind(tp, *member, self)
			return 1
		else:
			## cache method if found on interface object (the class) to avoid future calls to _tp_lookup_
			n = _tp_lookup_(tp, self, hash, k, member, bind, 0)
			if n == 1:
				if member->type.type_id == TP_FUNC:
					if defined(DEBUG):
						std::cout << "caching new method from parent class: " << k << std::endl;
					##if bind:
					*member = tp_bind(tp, *member, self)
					tpd_dict_hashsetx(tp, self.dict.val->meta.dict.val, hash, k, *member)
				##else:
				##	print(*member)
				##	throw "bad"
			return n
	else:
		return _tp_lookup_(tp, self, hash, k, member, bind, 0)


#define TP_META_BEGIN(self,name) \
if ((self.type.type_id == TP_DICT || self.type.type_id == TP_OBJECT) \
	) { \
tp_obj meta; if (tp_vget(tp, self, tp_string_atom(tp, name), &meta, 1)) {
#define TP_META_END \
	} \
}

