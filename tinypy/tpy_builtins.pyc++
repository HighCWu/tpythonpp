## Builtin tinypy functions.
## Python2 builtins - TODO support all, or raise an error that it is not supported
## 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip'

def tpy_print(TP) ->tp_obj;

def tpy_bind(TP) ->tp_obj:
	tp_obj r = TP_TYPE(TP_FUNC)
	tp_obj self = TP_OBJ()
	return tp_bind(tp, r, self)

def tpy_sizeof(TP) ->tp_obj:
	tp_obj ob = TP_OBJ()
	return tp_number(sizeof(ob))

def tpy_any(TP) ->tp_obj:
	tp_obj lst = TP_OBJ()
	std::vector<tp_obj> vec = lst.as_vector()
	for (int i=0; i<vec.size(); i++):
		tp_obj item = vec[i];
		if tp_true(tp, item):
			return tp_number(1)
	return tp_number(0)


def tpy_min(TP) ->tp_obj:
	tp_obj r = TP_OBJ()
	tp_obj e
	TP_LOOP(e)
	  if (tp_cmp(tp,r,e) > 0) { r = e; }
	TP_END
	return r


def tpy_max(TP) ->tp_obj:
	tp_obj r = TP_OBJ()
	tp_obj e
	TP_LOOP(e)
	  if (tp_cmp(tp,r,e) < 0) { r = e; }
	TP_END
	return r


def tpy_copy(TP) ->tp_obj:
	tp_obj r = TP_OBJ()
	int type = r.type.type_id
	if type == TP_LIST:
		return tp_list_copy(tp,r)
	elif type == TP_DICT:
		return tp_dict_copy(tp,r)
	tp_raise(tp_None,tp_string_atom(tp, "tp_copy TypeError: ?"))



def tpy_len(TP) ->tp_obj:
	tp_obj e = TP_OBJ()
	return tp_len(tp,e)

def tpy_getattr(TP)->tp_obj:
	tp_obj ob = TP_OBJ()
	tp_obj name = TP_OBJ()
	if name.type.type_id != TP_STRING:
		throw "ERROR: getattr - name is not a string"
	return tp_get(tp, ob, name)

def tpy_setattr(TP)->tp_obj:
	tp_obj ob = TP_OBJ()
	tp_obj name = TP_OBJ()
	tp_obj value = TP_OBJ()
	if name.type.type_id != TP_STRING:
		throw "ERROR: setattr - name is not a string"
	return tp_set(tp, ob, name, value)

def tpy_dir(TP) ->tp_obj:
	tp_obj ob = TP_OBJ()
	tp_obj r = tp_list(tp)
	if ob.type.type_id == TP_NUMBER:
		## in standard python this would return ['bit_length', 'conjugate', 'denominator', 'imag', 'numerator', 'real']
		## but these are not supported methods for numbers in TPython
		pass
	elif ob.type.type_id == TP_OBJECT:
		##print("tpy_dir: TP_OBJECT", ob.type.type_id)
		## class vars, like `__class__` in regular python
		for (int i=0; i < ob.obj.info->meta.dict.val->alloc; i++):
			if ob.obj.info->meta.dict.val->items[i].used != 1:
				continue
			r.append(ob.obj.info->meta.dict.val->items[i].key)
		## instance level vars
		for (int i=0; i < ob.dict.val->alloc; i++):
			if ob.dict.val->items[i].used != 1:
				continue
			r.append(ob.dict.val->items[i].key)
	elif ob.type.type_id == TP_LIST:
		##for (int i=0; i < ob.list.val->meta.dict.val->alloc; i++):
		##	if ob.list.val->meta.dict.val->items[i].used != 1:
		##		continue
		##	r.append(ob.list.val->meta.dict.val->items[i].key)
		r.append("append")
		r.append("pop")
		r.append("index")
		r.append("sort")
		r.append("extend")
	elif ob.type.type_id == TP_DICT:
		for (int i=0; i < ob.dict.val->meta.dict.val->alloc; i++):
			if ob.dict.val->meta.dict.val->items[i].used != 1:
				continue
			r.append(ob.dict.val->meta.dict.val->items[i].key)
	else:
		## this fallback can work because of funny union rules,
		## for example this works on a string, and probably other types
		## tested with gcc and clang.
		print("tpy_dir: type", ob.type.type_id)
		for (int i=0; i < ob.obj.info->meta.dict.val->alloc; i++):
			if ob.obj.info->meta.dict.val->items[i].used != 1:
				continue
			r.append(ob.obj.info->meta.dict.val->items[i].key)
	return r

def tpy_hasattr(TP) ->tp_obj:
	## note this is slow and could be optimized
	tp_obj names = tpy_dir(tp)
	tp_obj attrname = TP_OBJ()
	if attrname.type.type_id != TP_STRING:
		throw "ERROR: hasattr attr name is not a string"
	for i in range(len(names)):
		if names[i] == attrname:
			return tp_number(1)
	return tp_number(0)

def tpy_assert(TP) ->tp_obj:
	int a = TP_NUM()
	if (a) { return tp_None; }
	tp_raise(tp_None, tp_string_atom(tp, "tp_assert AssertionError"));


def tpy_range(TP) ->tp_obj:
	int a,b,c,i
	tp_obj r = tp_list_t(tp)
	switch tp->params.list.val->len:
		case 1:
			a = 0
			b = TP_NUM()
			c = 1
			break
		case 2:
			a = TP_NUM()
			b = TP_NUM()
			c = 1
			break
		case 3:
			a = TP_NUM()
			b = TP_NUM()
			c = TP_DEFAULT(tp_number(1)).number.val
			break
		default:
			return r
	if c != 0:
		for (i=a; (c>0) ? i<b : i>b; i+=c):
			tpd_list_append(tp, r.list.val, tp_number(i))
	return r


def tpy_istype(TP) ->tp_obj:
	tp_obj v = TP_OBJ()
	tp_obj t = TP_STR()
	if (tp_cmp(tp,t,tp_string_atom(tp, "string")) == 0) { return tp_number(v.type.type_id == TP_STRING); }
	if (tp_cmp(tp,t,tp_string_atom(tp, "list")) == 0) { return tp_number(v.type.type_id == TP_LIST); }
	if (tp_cmp(tp,t,tp_string_atom(tp, "dict")) == 0) { return tp_number(v.type.type_id == TP_DICT); }
	if (tp_cmp(tp,t,tp_string_atom(tp, "number")) == 0) { return tp_number(v.type.type_id == TP_NUMBER); }
	if (tp_cmp(tp,t,tp_string_atom(tp, "func")) == 0) { return tp_number(v.type.type_id == TP_FUNC && (v.type.magic& TP_FUNC_MASK_METHOD) == 0); }
	if (tp_cmp(tp,t,tp_string_atom(tp, "method")) == 0) { return tp_number(v.type.type_id == TP_FUNC && (v.type.magic& TP_FUNC_MASK_METHOD) != 0); }
	tp_raise(tp_None,tp_string_atom(tp, "(is_type) TypeError: ?"));


def tpy_isinstance(TP) ->tp_obj:
	tp_obj v = TP_OBJ()
	tp_obj t = TP_OBJ()
	tp_obj * pv = &v
	if t.type.type_id != TP_DICT:
		tp_raise(tp_None, tp_string_atom(tp, "isinstance TypeError: class argument must be a dictionary."))
	while pv->type.type_id >= TP_HAS_META:
		if pv->obj.info->meta.dict.val == t.dict.val:
			return tp_number(1)
		pv = &(pv->obj.info->meta)
	return tp_number(0)



def tpy_float(TP) ->tp_obj:
	tp_obj v = TP_OBJ()
	int ord = TP_DEFAULT(tp_number(0)).number.val
	int type = v.type.type_id
	if type == TP_NUMBER:
		return v
	elif type == TP_STRING && tp_string_len(v) < 32:
		char s[32]
		memset(s,0,tp_string_len(v)+1)
		memcpy(s, tp_string_getptr(v), tp_string_len(v))
		if strchr(s,'.'):
			return tp_number(atof(s))
		return(tp_number(strtol(s,0,ord)))
	tp_raise(tp_None,tp_string_atom(tp, "tpy_float TypeError: ?"));

def tpy_fpack(TP) ->tp_obj:
	tp_num v = TP_NUM()
	tp_obj r = tp_string_t(tp,sizeof(tp_num))
	*(tp_num*) tp_string_getptr(r) = v
	return r

def tpy_funpack(TP) ->tp_obj:
	tp_obj v = TP_STR()
	if tp_string_len(v) != sizeof(tp_num):
		tp_raise(tp_None, tp_string_atom(tp, "funpack ValueError: length of string is incorrect."))
	tp_num r = *((tp_num*) tp_string_getptr(v))
	return tp_number(r)


def tpy_abs(TP) ->tp_obj:
	return tp_number(fabs(tpy_float(tp).number.val));


def tpy_int(TP) ->tp_obj:
	return tp_number((long)tpy_float(tp).number.val)


def _roundf(tp_num v) ->double:
	tp_num av = fabs(v)
	tp_num iv = (long)av
	av = (av-iv < 0.5?iv:iv+1)
	return (v<0?-av:av)


def tpy_round(TP) ->tp_obj:
	return tp_number(_roundf(tpy_float(tp).number.val))


## Function: tp_setmeta
## Set a "dict`s meta".
## This is a builtin function, so you need to use <tp_params> to provide the
## parameters.
##
## In tinypy, each dictionary can have a so-called "meta" dictionary attached
## to it. When dictionary attributes are accessed, but not present in the
## dictionary, they instead are looked up in the meta dictionary. To get the
## raw dictionary, you can use <tp_getraw>.
##
## This function is particulary useful for objects and classes, which are just
## special dictionaries created with <tp_object> and <tp_class>. There you can
## use tp_setmeta to change the class of the object or parent class of a class.
##
## Parameters:
## self - The dictionary for which to set a meta.
## meta - The meta dictionary.
##
## Returns:
## None

def tpy_setmeta(TP) ->tp_obj:
	tp_obj self = TP_OBJ()
	if self.type.type_id < TP_HAS_META:
		tp_raise(
		  tp_None,
		  tp_string_atom(tp, "tp_check_type TypeError: type does not support meta."))
	tp_obj meta = TP_TYPE(TP_INTERFACE)
	self.obj.info->meta = meta
	return tp_None


def tpy_getmeta(TP) ->tp_obj:
	tp_obj self = TP_OBJ()
	if self.type.type_id < TP_HAS_META:
		tp_raise(
		  tp_None,
		  tp_string_atom(tp, "tp_check_type TypeError: type does not support meta."))
	return self.obj.info->meta

## Function: tp_object
## Creates a new object.
##
## Returns:
## The newly created object. The object initially has no parent class, use
## <tp_setmeta> to set a class. Also see <tp_object_new>.

def tpy_object_new(TP) ->tp_obj:
	tp_obj klass = TP_TYPE(TP_INTERFACE)
	tp_obj self = tp_object_t(tp)
	self.obj.info->meta = klass
	TP_META_BEGIN(self,"__init__")
	  tp_call(tp, meta, tp->params);
	TP_META_END
	return self


def tpy_object_call(TP) ->tp_obj:
	tp_obj self
	if tp->params.list.val->len:
		self = TP_TYPE(TP_OBJECT)
	else:
		self = tp_object_t(tp)
	return self


## Function: tp_getraw
## Retrieve the raw dict of a dict.
##
## This builtin retrieves one dict parameter from tinypy, and returns its raw
## dict. This is very useful when implementing your own __get__ and __set__
## functions, as it allows you to directly access the attributes stored in the
## dict.

def tpy_getraw(TP) ->tp_obj:
	tp_obj self = TP_OBJ()
	if self.type.type_id != TP_DICT && self.type.type_id != TP_INTERFACE && self.type.type_id != TP_OBJECT:
		tp_raise(tp_None, tp_string_atom(tp, "Cannot cast the object to a dict"))
	self.type.type_id = TP_DICT
	return self


## Function: tp_class
## Creates a new base class.
##
## Parameters:
## none
##
## Returns:
## A new, empty class (derived from tinypys builtin "object" class).

def tp_class(TP) ->tp_obj:
	tp_obj klass = tp_interface_t(tp)
	klass.obj.info->meta = tp_get(tp, tp->builtins, tp_string_atom(tp, "object"))
	return klass


## Function: tpy_bool
## Coerces any value to a boolean.

def tpy_bool(TP) ->tp_obj:
	tp_obj v = TP_OBJ()
	return (tp_number(tp_true(tp, v)))


## import a module or members of a module
## compiler is initialized; 
## it only loads existing modules from the module, and returns None
## on failure. 
## Python : 
##
## __import__(modname, members)
##
## Parameters
## ----------
## modname : string; name of the module
## members : None, list or '*'. names to import.
##
## Returns
## -------
##  module, if members is None
##  dict constructed from names on the list and members of the module.
##
##  If members is '*', the list includes every member that does not start with '_'.
##

def tpy_import(TP) ->tp_obj:
	tp_obj modname = TP_OBJ()
	tp_obj member = TP_OBJ()
	if not tp_has(tp, tp->modules, modname).number.val:
		tp_raise(tp_None, tp_string_atom(tp, "tpy_import: cannot import module"))
	tp_obj mod = tp_get(tp, tp->modules, modname)
	if member.type.type_id == TP_NONE:
		## the entire module
		return mod
	## import members as a dict
	tp_obj ret = tp_dict_t(tp)
	if member.type.type_id == TP_STRING:
		## from ... import *
		if 0 == tp_string_cmp(member, tp_string_atom(tp, "*")):
			int i
			for (i = 0; i < mod.dict.val->len; i ++):
				tpd_item item = mod.dict.val->items[ tpd_dict_next(tp, mod.dict.val) ];
				tp_obj k = item.key
				tp_obj v = item.val
				if (k.type.type_id != TP_STRING) continue;
				if (tp_string_len(k) == 0) continue;
				char * p = tp_string_getptr(k)
				if (p[0] == '_') continue;
				tp_dict_set(tp, ret, k, v)
			return ret
	## from ... import a, b, c
	if member.type.type_id == TP_LIST:
		int i
		for (i = 0; i < member.list.val->len; i ++):
			tp_obj k = member.list.val->items[i]
			tp_obj v = tp_mget(tp, mod, k)
			tp_dict_set(tp, ret, k, v)
		return ret
	tp_raise(tp_None, tp_string_atom(tp, "tpy_import: cannot import the given member "))
	return tp_None


def tpy_exec(TP) ->tp_obj:
	tp_obj code = TP_OBJ()
	tp_obj globals = TP_OBJ()
	tp_obj r = tp_None
	return tp_exec(tp, code, globals)


def tpy_eval(TP) ->tp_obj:
	tp_obj text = TP_STR()
	tp_obj globals = TP_TYPE(TP_DICT)
	tp_obj code = tp_compile(tp, text, tp_string_atom(tp, "<eval>"))
	tp_exec(tp, code, globals)
	return tp->last_result

def tpy_print(TP) ->tp_obj:
	int n = 0
	tp_obj e
	TP_LOOP(e)
	  if (n) tp->echo(" ", -1);
	  tp_echo(tp,e)
	  n += 1
	TP_END
	tp->echo("\n", -1)
	return tp_None


def tpy_str(TP) ->tp_obj:
	tp_obj v = TP_OBJ()
	return tp_str(tp, v)


def tpy_repr(TP) ->tp_obj:
	tp_obj v = TP_OBJ()
	return tp_repr(tp, v)


def tpy_compile(TP) ->tp_obj:
	tp_obj text = TP_OBJ()
	tp_obj fname = TP_OBJ()
	return tp_compile(tp, text, fname)


def tpy_module(TP) ->tp_obj:
	tp_obj name = TP_OBJ()
	tp_obj code = TP_OBJ()
	tp_obj fname = TP_OBJ()
	return tp_import(tp, name, code, fname)

def tpy_dict(TP) ->tp_obj:
	return tp_dict_copy(tp, TP_TYPE(TP_DICT))

def tpy_list(TP) ->tp_obj:
	tp_obj ob = TP_OBJ()
	return tp_list_copy(tp, ob)


#ifdef BLENDOT_TYPES

def tpy_vec2(TP) ->tp_obj:
	tp_obj x = TP_OBJ()
	tp_obj y = TP_OBJ()
	return tp_vec2(x.number.val, y.number.val)

def tpy_vec3(TP) ->tp_obj:
	tp_obj x = TP_OBJ()
	tp_obj y = TP_OBJ()
	tp_obj z = TP_OBJ()
	return tp_vec3(x.number.val, y.number.val, z.number.val)

def tpy_quat(TP) ->tp_obj:
	tp_obj x = TP_OBJ()
	tp_obj y = TP_OBJ()
	tp_obj z = TP_OBJ()
	tp_obj w = TP_OBJ()
	return tp_quat(x.number.val, y.number.val, z.number.val, w.number.val)

def tpy_color(TP) ->tp_obj:
	tp_obj r = TP_OBJ()
	tp_obj g = TP_OBJ()
	tp_obj b = TP_OBJ()
	tp_obj a = TP_OBJ()
	return tp_color(r.number.val, g.number.val, b.number.val, a.number.val)

def tpy_rect(TP) ->tp_obj:
	tp_obj x = TP_OBJ()
	tp_obj y = TP_OBJ()
	tp_obj w = TP_OBJ()
	tp_obj h = TP_OBJ()
	return tp_rect(x.number.val, y.number.val, w.number.val, h.number.val)

def tpy_tri(TP) ->tp_obj:
	tp_obj a = TP_OBJ()
	tp_obj b = TP_OBJ()
	tp_obj c = TP_OBJ()
	return tp_tri(a.vec3.vec, b.vec3.vec, c.vec3.vec)

def tpy_plane(TP) ->tp_obj:
	tp_obj normal = TP_OBJ()
	tp_obj length = TP_OBJ()
	return tp_plane(normal.vec3.vec, length.number.val)

def tpy_aabb(TP) ->tp_obj:
	tp_obj a = TP_OBJ()
	tp_obj b = TP_OBJ()
	return tp_aabb(a.vec3.vec, b.vec3.vec)


def tpy_mat3(TP) ->tp_obj:
	tp_obj a = TP_OBJ()
	tp_obj b = TP_OBJ()
	tp_obj c = TP_OBJ()
	return tp_mat3(a.vec3.vec, b.vec3.vec, c.vec3.vec)

def tpy_trans(TP) ->tp_obj:
	tp_obj a = TP_OBJ()
	tp_obj b = TP_OBJ()
	return tp_trans(a.mat3.m, b.vec3.vec)

def tpy_rid(TP) ->tp_obj:
	tp_obj a = TP_OBJ()
	return tp_rid( (int)a.number.val )

def tpy_spatial(TP) ->tp_obj:
	tp_obj pos = TP_OBJ()
	tp_obj rot = TP_OBJ()
	tp_obj scl = TP_OBJ()
	return tp_spatial(pos.vec3.vec, rot.vec3.vec, scl.vec3.vec)

def tpy_mesh(TP) ->tp_obj:
	return tp_mesh()

#endif

#ifdef UNREAL_TYPES
def tpy_uobject(TP) ->tp_obj:
	return tp_uobject()
#endif


#ifdef __EMSCRIPTEN_major__

@javascript
def __eval_js(const char* code):
	eval(code)

##import <emscripten/threading.h>
def tpy_eval_js(TP) ->tp_obj:
	tp_obj code = TP_OBJ()
	__eval_js(code)
	##emscripten_sync_run_in_main_runtime_thread(code)
	return None

def tpy_eval_js_returns(TP) ->tp_obj:
	tp_obj code = TP_OBJ()
	tp_obj rtype = TP_OBJ()
	if rtype == "void":
		__eval_js(code)
		return None
	elif rtype == "int":
		return tp_number(emscripten_run_script_int(code))
	elif rtype == "float":
		return tp_number(emscripten_run_script_int(code))
	elif rtype == "string":
		return tp_string_from_stdstring(tp, std::string(emscripten_run_script_string(code)) )


#else

def tpy_eval_js(TP) ->tp_obj:
	throw "eval_js can only be used when compiled using the option --wasm or --html"

def tpy_eval_js_returns(TP) ->tp_obj:
	throw "javascript can only be used when compiled using the option --wasm or --html"

#endif

## https://stackoverflow.com/questions/1591361/understanding-typedefs-for-function-pointers-in-c
typedef tp_obj (*tp_func_pointer)(tp_vm*);

def tp_module_builtins_init(TP):
	tp_obj builtins = tp->builtins
	## set an alias for the builtin module; Notice that this module is already imported by the vm.
	tp_set(tp, tp->modules, tp_string_atom(tp, "tinypy.language.builtins"), builtins)
	tp_obj o
	//struct {const char *s;void *f;} b[] = {
	struct {const char *s; tp_func_pointer f;} b[] = {
	{"sizeof", tpy_sizeof},
	{"any", tpy_any},
	{"compile", tpy_compile},
	{"print",tpy_print},
	{"range",tpy_range},
	{"min",tpy_min},
	{"max",tpy_max},
	{"bind", tpy_bind},
	{"copy",tpy_copy},
	{"__import__",tpy_import},
	{"__merge__", tpy_dict_merge},
	{"len",tpy_len},
	{"dir",tpy_dir},
	{"__assert__", tpy_assert},
	{"str", tpy_str},
	{"float",tpy_float}, 
	{"istype",tpy_istype},
	{"isinstance",tpy_isinstance}, 
	{"chr",tpy_chr}, 
	{"fpack",tpy_fpack},
	{"funpack", tpy_funpack},
	{"abs",tpy_abs},
	{"eval",tpy_eval},
	{"exec",tpy_exec},
	{"number",tpy_float},
	{"int",tpy_int},
	{"bool", tpy_bool},
	{"dict", tpy_dict},
	{"list", tpy_list},
	{"round",tpy_round},
	{"ord",tpy_ord},
	{"hasattr",tpy_hasattr},
	{"getattr",tpy_getattr},
	{"setattr",tpy_setattr},
	{"getraw",tpy_getraw},
	{"setmeta",tpy_setmeta},
	{"getmeta",tpy_getmeta},
	{"module", tpy_module},
	{"repr", tpy_repr},
	{"eval_js", tpy_eval_js},
	{"javascript", tpy_eval_js_returns},
	#ifdef BLENDOT_TYPES
	{"vec2", tpy_vec2},
	{"vec3", tpy_vec3},
	{"quat", tpy_quat},
	{"color", tpy_color},
	{"rect", tpy_rect},
	{"tri", tpy_tri},
	{"plane", tpy_plane},
	{"mat3", tpy_mat3},
	{"aabb", tpy_aabb},
	{"trans", tpy_trans},
	{"RID", tpy_rid},
	{"spatial", tpy_spatial},
	{"mesh", tpy_mesh},
	#endif
	#ifdef UNREAL_TYPES
	{"UObject", tpy_uobject},
	#endif
	#ifdef TP_SANDBOX
	{"sandbox",tpy_sandbox_},
	#endif
	{0,0},
	};
	int i
	for (i=0; b[i].s; i++):
		tp_set(tp, builtins, tp_string_atom(tp, b[i].s), tp_function(tp,(tp_obj (*)(tp_vm *))b[i].f))
	o = tp_interface_t(tp)
	tp_set(tp, o, tp_string_atom(tp, "__call__"), tp_function(tp, tpy_object_call))
	tp_set(tp, o, tp_string_atom(tp, "__new__"),  tp_function(tp, tpy_object_new))
	tp_set(tp, builtins, tp_string_atom(tp, "object"), o)
	/*
	tp_set(tp, tp->_list_meta, tp_string_atom(tp, "append"), tp_function(tp, tpy_list_append))
	tp_set(tp, tp->_list_meta, tp_string_atom(tp, "pop"), tp_function(tp, tpy_list_pop))
	tp_set(tp, tp->_list_meta, tp_string_atom(tp, "index"), tp_function(tp, tpy_list_index))
	tp_set(tp, tp->_list_meta, tp_string_atom(tp, "sort"), tp_function(tp, tpy_list_sort))
	tp_set(tp, tp->_list_meta, tp_string_atom(tp, "extend"), tp_function(tp, tpy_list_extend))
	*/
	tp_set(tp, __string_meta__, tp_string_atom(tp, "join"), tp_function(tp, tpy_str_join))
	tp_set(tp, __string_meta__, tp_string_atom(tp, "split"), tp_function(tp, tpy_str_split))
	tp_set(tp, __string_meta__, tp_string_atom(tp, "splitlines"), tp_function(tp, tpy_str_splitlines))
	tp_set(tp, __string_meta__, tp_string_atom(tp, "index"), tp_function(tp, tpy_str_index))
	tp_set(tp, __string_meta__, tp_string_atom(tp, "find"), tp_function(tp, tpy_str_find))
	tp_set(tp, __string_meta__, tp_string_atom(tp, "strip"), tp_function(tp, tpy_str_strip))
	tp_set(tp, __string_meta__, tp_string_atom(tp, "replace"), tp_function(tp, tpy_str_replace))
	tp_set(tp, __string_meta__, tp_string_atom(tp, "reverse"), tp_function(tp, tpy_str_reverse))
	tp_set(tp, __string_meta__, tp_string_atom(tp, "startswith"), tp_function(tp, tpy_str_startswith))
	tp_set(tp, __string_meta__, tp_string_atom(tp, "endswith"), tp_function(tp, tpy_str_endswith))
	tp_set(tp, tp->_dict_meta, tp_string_atom(tp, "update"), tp_function(tp, tpy_dict_merge))
	tp_set(tp, tp->_dict_meta, tp_string_atom(tp, "keys"), tp_function(tp, tpy_dict_keys))
	tp_set(tp, tp->_dict_meta, tp_string_atom(tp, "values"), tp_function(tp, tpy_dict_values))


