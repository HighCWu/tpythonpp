static tp_obj __tiny_strings_256__[256] = {};


## write to standard output
def tp_default_echo(const char* string, int length):
	if length < 0:
		length = strlen(string)
	fwrite(string, 1, length, stdout)

## File: VM
## Functionality pertaining to the virtual machine.

def tp_create_vm(void) -> tp_vm*:
	int i
	tp_vm *tp = (tp_vm*)calloc(sizeof(tp_vm),1)
	tp->cur = 0
	tp->jmp = 0
	tp->ex = tp_None
	tp->root = tp_list_nt(tp);  // root is not tracked by gc, as gc is not defined yet.
	tp->echo = tp_default_echo
	for (i=0; i<256; i++) { tp->chars[i][0]=i; }
	tp_gc_init(tp)
	tp->_dict_meta = tp_interface_t(tp)
	## gc initialized, can use tpy_ functions.
	tp->_regs = tp_list_t(tp);
	for (i=0; i<TP_REGS; i++) { tp_set(tp, tp->_regs, tp_None, tp_None); }
	tp->modules = tp_dict_t(tp)
	tp->globals = tp_dict_t(tp)
	tp->_params = tp_list_t(tp)
	if defined(TINY_LIST_PARAMS):
		tp->params  = tp_tiny_list(tp)
	else:
		for (i=0; i<TP_FRAMES; i++) { tp_set(tp, tp->_params, tp_None, tp_list_t(tp)); }
	tp_set(tp, tp->root, tp_None, tp->builtins)
	tp_set(tp, tp->root, tp_None, tp->modules)
	tp_set(tp, tp->root, tp_None, tp->_regs)
	tp_set(tp, tp->root, tp_None, tp->_params)
	tp->builtins = tp_import(tp, tp_string_atom(tp, "__builtins__"), tp_None, tp_string_atom(tp, "<builtins>"))
	tp_set(tp, tp->root, tp_None, tp->_dict_meta)
	##tp_set(tp, tp->root, tp_None, tp->_string_meta);
	tp->regs = tp->_regs.list.val->items
	tp->last_result = tp_None
	tp_full(tp)
	return tp

def tp_enter_frame(TP, tp_obj code, tp_obj * ret_dest):
	##if tp->frames[tp->cur].cur == NULL:  ## allocating a new frame is already optimized, 
	## trying to reuse it will crash
	tpd_frame f = tp_frame_nt(tp, code, ret_dest)
	##if (f.regs+(256+TP_REGS_EXTRA) >= tp->regs+TP_REGS || tp->cur >= TP_FRAMES-1) {
	##    tp_raise(,tp_string_atom(tp, "(tp_frame) RuntimeError: stack overflow"));
	##}
	if f.regs+(256+TP_REGS_EXTRA) >= tp->regs+TP_REGS:
		throw "StackOverflowError in tp_vm.cpp:tp_enter_frame (f.regs+(256+TP_REGS_EXTRA) >= tp->regs+TP_REGS)"
	if tp->cur >= TP_FRAMES-1:
		throw "StackOverflowError in tp_vm.cpp:tp_enter_frame (tp->cur >= TP_FRAMES-1)"
	tp->cur += 1
	tp->frames[tp->cur] = f

##def tp_enter_frame(TP, tp_obj func, tp_obj * ret_dest):
##	tpd_frame f = tp_frame_nt(tp, func, ret_dest)
##	if f.regs+(256+TP_REGS_EXTRA) >= tp->regs+TP_REGS:
##		throw "StackOverflowError in tp_vm.cpp:tp_enter_frame (f.regs+(256+TP_REGS_EXTRA) >= tp->regs+TP_REGS)"
##	if tp->cur >= TP_FRAMES-1:
##		throw "StackOverflowError in tp_vm.cpp:tp_enter_frame (tp->cur >= TP_FRAMES-1)"
##	tp->cur += 1
##	tp->frames[tp->cur] = f


def _tp_raise(TP, tp_obj e):
	print("tp_vm.cpp _tp_raise (RAISE RUNTIME ERROR)")
	std::cout << "  error message: " << e << std::endl
	throw "RuntimeError"

def tp_print_stack(TP):
	int i
	tp->echo("\n", -1)
	if defined(DEBUG):
		for (i=0; i<=tp->cur; i++) {
		if (!tp->frames[i].lineno) { continue; }
		tp->echo("File \"", -1); tp_echo(tp,tp->frames[i].fname); tp->echo("\", ", -1)
		tp_echo(tp, tp_printf(tp, "line %d, in ",tp->frames[i].lineno))
		tp_echo(tp,tp->frames[i].name); tp->echo("\n ", -1)
		tp_echo(tp,tp->frames[i].line); tp->echo("\n", -1)
		}
	tp->echo("\nException:\n", -1); tp_echo(tp,tp->ex); tp->echo("\n", -1)


def tp_handle(TP):
	int i
	for (i=tp->cur; i>=0; i--):
		if (tp->frames[i].jmp) { break; }
	if i >= 0:
		tp->cur = i
		tp->frames[i].cur = tp->frames[i].jmp
		tp->frames[i].jmp = 0
		return
	tp_print_stack(tp)
	exit(-1)

def tp_step(TP) ->int;

def tp_continue_frame(TP, int cur):
	tp->jmp += 1
	## keep runing till the frame drops back (aka function returns)
	while tp->cur >= cur:
		if tp_step(tp) == -1:
			break;
	tp->jmp -= 1


## run the current frame till it returns
def tp_run_frame(TP):
	tp_continue_frame(tp, tp->cur)


def tp_return(TP, tp_obj v):
	tp_obj *dest = tp->frames[tp->cur].ret_dest
	if dest:
		*dest = v; tp_grey(tp,v)
	##memset(tp->frames[tp->cur].regs,0,TP_REGS_PER_FRAME*sizeof(tp_obj));
	##fprintf(stderr,"regs:%d\n",(tp->frames[tp->cur].cregs+1));
	## is this memset to clear the really required?
	if defined(DEBUG):
		memset(tp->frames[tp->cur].regs-TP_REGS_EXTRA,0,(TP_REGS_EXTRA+tp->frames[tp->cur].cregs)*sizeof(tp_obj))
	tp->cur -= 1


import "interpreter_codes.gen.h"

#ifdef DEBUG
  #include "interpreter_codes_debug.gen.h"
#endif

define(VA=((int)e.regs.a))
define(VB=((int)e.regs.b))
define(VC=((int)e.regs.c))
define(RA=regs[e.regs.a])
define(RB=regs[e.regs.b])
define(RC=regs[e.regs.c])
define(UVBC=(unsigned short)(((VB<<8)+VC)))
define(SVBC=(short)(((VB<<8)+VC)))
define(GA=tp_grey(tp,RA))
#define SR(v) f->cur = cur; return(v);


def TP_xSTR(TP, tp_obj obj) ->char *:
	return tp_cstr(tp, tp_str(tp, obj))

static tp_obj __globals256__[256] = {};
static tp_obj __global_objects__[256] = {};
static double __const_numbers__[256] = {};
##static std::unordered_map<std::string_view, tp_obj> __string_cache__ = {};

def tp_step(TP) ->int:
	tpd_frame *f = &tp->frames[tp->cur]
	tp_obj *regs = f->regs
	tpd_code *cur = f->cur
	while 1:
		tpd_code e = *cur
		#ifdef DEBUG
		  if (e.i < TP_ITOTAL) fprintf(stdout,"%2d.%4d: %-6s %3d %3d %3d\n",tp->cur,cur - (tpd_code*)f->code.string.info->s,tp_strings[e.i],VA,VB,VC);
		#endif
		if e.i == 60:
			#ifdef DEBUG
			  print("---------FAST PRINT--------")
			#endif
			std::cout << (char)VA
		elif e.i == 64:
			#ifdef DEBUG
			  print("---------FAST GLOBAL ADD--------")
			  std::cout << "	VB: " << (char)VB << std::endl;
			  std::cout << "	VC: " << (char)VC << std::endl;
			#endif
			tp_obj b = __global_objects__[VB]
			tp_obj c = __global_objects__[VC]
			RA.number.val = b.number.val + c.number.val
		elif e.i == 65:
			#ifdef DEBUG
			  print("---------FAST GLOBAL SUB--------")
			  std::cout << "	VB: " << (char)VB << std::endl;
			  std::cout << "	VC: " << (char)VC << std::endl;
			#endif
			tp_obj b = __global_objects__[VB]
			tp_obj c = __global_objects__[VC]
			RA.number.val = b.number.val - c.number.val
		elif e.i == 66:
			#ifdef DEBUG
			  print("---------FAST GLOBAL MULT--------")
			  std::cout << "	VB: " << (char)VB << std::endl;
			  std::cout << "	VC: " << (char)VC << std::endl;
			#endif
			tp_obj b = __global_objects__[VB]
			tp_obj c = __global_objects__[VC]
			RA.number.val = b.number.val * c.number.val
		elif e.i == 67:
			#ifdef DEBUG
			  print("---------FAST GLOBAL DIV--------")
			  std::cout << "	VB: " << (char)VB << std::endl;
			  std::cout << "	VC: " << (char)VC << std::endl;
			#endif
			tp_obj b = __global_objects__[VB]
			tp_obj c = __global_objects__[VC]
			RA.number.val = b.number.val / c.number.val
		elif e.i == 68:
			__global_objects__[VA].number.val = __global_objects__[VB].number.val + __global_objects__[VC].number.val
		elif e.i == 69:
			__global_objects__[VA].number.val = __global_objects__[VB].number.val - __global_objects__[VC].number.val
		elif e.i == 70:
			__global_objects__[VA].number.val = __global_objects__[VB].number.val * __global_objects__[VC].number.val
		elif e.i == 71:
			__global_objects__[VA].number.val = __global_objects__[VB].number.val / __global_objects__[VC].number.val
		elif e.i == 80:
			#ifdef DEBUG
			  print("----------FAST LESS THAN----------")
			  std::cout << "	RA: " << tp_as_string(tp, RA) << std::endl;
			  std::cout << "	VB: " << VB << std::endl;
			  std::cout << "	VC: " << VC << std::endl;
			  std::cout << "	const: " << __const_numbers__[VB] << std::endl;
			#endif
			// if the condition is true, then skip the next byte code,
			// which seems odd, but is correct, because in encode.py,
			// in the function do_while, after the generated `if`,
			// there is a generated `jump(end)`, that is the end of the loop,
			// so here when this is true, we are skipping that jump to end.
			// note that after the big switch, there is already an increment
			// on the cur pointer by 1
			if RA.number.val < __const_numbers__[VB]:
				cur += 1
			RA.number.val ++
		elif e.i == 81:
			if RA.number.val < __const_numbers__[VB]:
				cur += 1
			if VC:
				RA.number.val += VC
		elif e.i == 82:
			if __global_objects__[VA].number.val < __global_objects__[VB].number.val:
				cur += 1
		elif e.i == 83:
			if RA.number.val < __global_objects__[VB].number.val:
				cur += 1
		elif e.i == 90:
			#ifdef DEBUG
			  print("TP_POST_INC ++")
			  std::cout << "  RA: " << tp_as_string(tp, RA) << std::endl;
			  std::cout << "  RB: " << tp_as_string(tp, RB) << std::endl;
			  std::cout << "  RC: " << tp_as_string(tp, RC) << std::endl;
			  std::cout << "VA: " << VA << std::endl;
			  std::cout << "VB: " << VB << std::endl;
			  std::cout << "VC: " << VC << std::endl;
			#endif
			if RA.type.type_id == TP_INTEGER:
				RA.integer.val ++
			else:
				RA.number.val ++
		elif e.i == 91:
			#ifdef DEBUG
			  print("TP_LOCAL_INC += n")
			  std::cout << "  RA: " << tp_as_string(tp, RA) << std::endl;
			  std::cout << "  RB: " << tp_as_string(tp, RB) << std::endl;
			  std::cout << "  RC: " << tp_as_string(tp, RC) << std::endl;
			  std::cout << "VA: " << VA << std::endl;
			  std::cout << "VB: " << VB << std::endl;
			  std::cout << "VC: " << VC << std::endl;
			#endif
			if RA.type.type_id == TP_INTEGER:
				RA.integer.val += (int)VB
			else:
				RA.number.val += (double)VB
		elif e.i == 92:
			#ifdef DEBUG
			  print("TP_GLOBAL_INC += n")
			#endif
			__global_objects__[VA].number.val += VB
		elif e.i == 101:
			#ifdef DEBUG
			  print("=====IADD GLOBAL by GLOBAL=====")
			  std::cout << "VA: " << (char)VA << std::endl;
			  std::cout << "VB: " << (char)VB << std::endl;
			  std::cout << "VC: " << (char)VC << std::endl;
			#endif
			__global_objects__[VA].number.val += __global_objects__[VB].number.val
		elif e.i == 102:
			#ifdef DEBUG
			  print("=====ISUB GLOBAL by GLOBAL=====")
			#endif
			__global_objects__[VA].number.val -= __global_objects__[VB].number.val
		elif e.i == 103:
			#ifdef DEBUG
			  print("=====IMUL GLOBAL by GLOBAL=====")
			#endif
			__global_objects__[VA].number.val *= __global_objects__[VB].number.val
		elif e.i == 104:
			#ifdef DEBUG
			  print("=====IDIV GLOBAL by GLOBAL=====")
			#endif
			__global_objects__[VA].number.val /= __global_objects__[VB].number.val
		elif e.i == 105:
			#ifdef DEBUG
			  print("=====IADD GLOBAL by GLOBAL+GLOBAL=====")
			  std::cout << "VA: " << (char)VA << std::endl;
			  std::cout << "VB: " << (char)VB << std::endl;
			  std::cout << "VC: " << (char)VC << std::endl;
			#endif
			// 3x faster!
			tp_obj a = __global_objects__[VA]
			tp_obj b = __global_objects__[VB]
			tp_obj c = __global_objects__[VC]
			//if (RA.type.type_id == TP_INTEGER)  // DEPRECATE integer type?
			//	a.integer.val += b.integer.val + c.integer.val;
			//else
			a.number.val += b.number.val + c.number.val
			__global_objects__[VA] = a
		elif e.i == 106:
			#ifdef DEBUG
			  print("=====IADD GLOBAL by GLOBAL-GLOBAL=====")
			#endif
			tp_obj b = __global_objects__[VB]
			tp_obj c = __global_objects__[VC]
			__global_objects__[VA].number.val += b.number.val - c.number.val
		elif e.i == 107:
			#ifdef DEBUG
			  print("=====IADD GLOBAL by GLOBAL*GLOBAL=====")
			#endif
			tp_obj b = __global_objects__[VB]
			tp_obj c = __global_objects__[VC]
			__global_objects__[VA].number.val += b.number.val * c.number.val
		elif e.i == 108:
			#ifdef DEBUG
			  print("=====IADD GLOBAL by GLOBAL/GLOBAL=====")
			#endif
			tp_obj b = __global_objects__[VB]
			tp_obj c = __global_objects__[VC]
			__global_objects__[VA].number.val += b.number.val / c.number.val
		elif e.i == 128:
			#ifdef DEBUG
			  print("FAST IF global+global<=n")
			#endif
			if __global_objects__[VA].number.val+__global_objects__[VB].number.val <= (double)VC:
				cur += 1
		else:
			switch e.i:
				case TP_IEOF: tp->last_result = RA; tp_return(tp,tp_None); SR(0); break;
				case TP_IREGS: f->cregs = VA; break;
				case TP_INAME:
					if defined(DEBUG) or defined(DEBUG_CALLS):
						##f->name = RA
						std::cout << cYellow << "set function name =" << tp_as_string(tp, RB) << cNone <<std::endl;
						RA.func.info->name = RB
					break
				case TP_IINTEGER:
					RA = tp_integer( VB );
					//RA = tp_integer(  (int)(*(tp_num*)((*++cur).string.val ))  );  // TODO FIXME
					#ifdef DEBUG
					  std::cout << RA.integer.val << std::endl;
					#endif
					//cur += sizeof(tp_num)/4;
					//continue;
					break
				case TP_INUMBER:
					double num = *(tp_num*)((*++cur).string.val )
					if VB==1:
						RA = tp_number(num)
						__const_numbers__[VC] = num
					elif VB==2:
						__const_numbers__[VC] = num
					else:
						RA = tp_number(num)
					#ifdef DEBUG
					  std::cout << num << std::endl;
					#endif
					cur += sizeof(tp_num)/4
					continue
					break
				case 178:
					if defined(DEBUG):
						print("new tiny char string")
						std::cout << (char)VB << std::endl;
					RA = tp_string_tiny((char)VB)
					break
				case 179:
					if defined(DEBUG):
						print("new tiny interned string")
					## this caching only adds a 5% overhead to tp_step, and eliminates the 13% overhead of calling tp_string_tiny
					if __tiny_strings_256__[VC].type.type_id != TP_NONE:
						RA = __tiny_strings_256__[VC]
					else:
						RA = tp_string_tiny( (*(cur+1)).string.val, VB, VC )
						__tiny_strings_256__[VC] = RA
					cur += (VB/4)+1
					break
				case TP_ISTRING:
					## old notes: RA = tp_string_n((*(cur+1)).string.val,UVBC); // from TinyPy - May 13, 2009
					if defined(DEBUG):
						std::cout << "NEW STRING " << cGreen <<  std::string((*(cur+1)).string.val, UVBC) << cNone << " len=" << cBlue << UVBC << cNone << std::endl;
					##int a = (*(cur+1)).string.val - tp_string_getptr(f->code);
					##RA = tp_string_view(tp, f->code, a, a+UVBC);
					## old notes: string_view is NOT broken, but is slightly slower than tp_string_from_const
					if UVBC <= 12:
						## stack allocated string
						RA = tp_string_tiny( (*(cur+1)).string.val, UVBC )
						## note: can not use the byte code position for hash cashing
						##std::cout << RA << " " << tp->cur << " " << (unsigned long)f->cur << std::endl;
					else:
						RA = tp_string_from_const(tp, (*(cur+1)).string.val, UVBC )
					cur += (UVBC/4)+1
					break
				case TP_IMOVE:
					RA = RB
					break
				case TP_IIF:
					if RA.type.type_id==TP_NUMBER:
						if RA.number.val:
							cur += 1
					else:
						if tp_true(tp,RA):
							cur += 1
					break;
				case TP_IEQ:
					if RB.type.type_id==TP_NUMBER and RC.type.type_id==TP_NUMBER:
						if RB.number.val==RC.number.val:
							RA = tp_number(1)
						else:
							RA = tp_number(0)
					else:
						RA = tp_number(tp_cmp(tp,RB,RC)==0)
					break
				case TP_ILE: RA = tp_number(tp_cmp(tp,RB,RC)<=0); break;
				case TP_ILT: RA = tp_number(tp_cmp(tp,RB,RC)<0); break;
				case TP_IGGET:
					if defined(DEBUG):
						print("Global Get - TP_IGGET")
						std::cout << "  RA: " << tp_as_string(tp, RA) << std::endl;  // destination register
						std::cout << "  RB: " << tp_as_string(tp, RB) << std::endl;  // name of variable to fetch
					if RB.type.type_id==TP_STRING_TINY:
						if len(RB)==1:
							RA = __global_objects__[ (int)RB.str.val[0] ];
						##elif not tp_iget(tp, &RA, f->globals, RB):
						elif not tp_iget(tp, &RA, tp->globals, RB):
							RA = tp_get(tp,tp->builtins,RB); GA;
					elif RB.string.info->len==1:
						RA = __global_objects__[ (int)RB.string.info->s[0] ];
					##elif not tp_iget(tp, &RA, f->globals, RB):
					elif not tp_iget(tp, &RA, tp->globals, RB):
						RA = tp_get(tp,tp->builtins,RB); GA;
					break
				case 156:
					if defined(DEBUG):
						print("Global256 Set")
					__globals256__[ VA ] = RB
					break
				case 157:
					if defined(DEBUG):
						print("Global256 Get")
					RA = __globals256__[ VB ]
					break
				case TP_IGSET:
					if defined(DEBUG):
						print("Global Set - TP_IGSET")
						std::cout << "  RA: " << tp_as_string(tp, RA) << std::endl;  // variable name to set to
						std::cout << "  RB: " << tp_as_string(tp, RB) << std::endl;  // value of variable
					if RA.type.type_id==TP_STRING_TINY:
						if len(RA)==1:
							__global_objects__[ (int)RA.str.val[0] ] = RB
						else:
							##tp_set(tp,f->globals,RA,RB)
							tp_set(tp,tp->globals,RA,RB)
					elif RA.string.info->len==1:
						//int idx = (int)RA.string.info->s[0];
						//std::cout << "global set index: " << idx << std::endl;
						__global_objects__[ (int)RA.string.info->s[0] ] = RB
					else:
						##tp_set(tp,f->globals,RA,RB)
						tp_set(tp,tp->globals,RA,RB)
					break
				case 190:
					if defined(DEBUG):
						print("+ FAST TP_IADD +")
						std::cout << "  RB: " << tp_as_string(tp, RB) << std::endl;  // first operand
						std::cout << "  RC: " << tp_as_string(tp, RC) << std::endl;  // second operand
					RA = tp_number(RB.number.val + VC)
					break
				case TP_IADD:
					if defined(DEBUG):
						print("+ TP_IADD +")
						std::cout << "  RB: " << tp_as_string(tp, RB) << std::endl;  // first operand
						std::cout << "  RC: " << tp_as_string(tp, RC) << std::endl;  // second operand
					if RB.type.type_id == TP_NUMBER:
						RA = tp_number(RB.number.val+RC.number.val)
					else:
						RA = tp_add(tp,RB,RC)
					break
				case TP_ISUB:
					if RB.type.type_id==TP_NUMBER:
						RA = tp_number(RB.number.val - RC.number.val)
					else:
						RA = tp_sub(tp,RB,RC)
					break
				case TP_IMUL:
					if RB.type.type_id==TP_NUMBER:
						RA = tp_number(RB.number.val * RC.number.val)
					else:
						RA = tp_mul(tp,RB,RC)
					break
				case TP_IDIV:
					RA = tp_div(tp,RB,RC)
					break
				case TP_ICMP: RA = tp_number(tp_cmp(tp,RB,RC)); break;
				case TP_IMGET:
					RA = tp_mget(tp,RB,RC)
					GA
					break
				case TP_IGET:
					## note: tp_get has a special case for lists where if the index is None,
					## the first item is removed and returned, this will be DEPRECATED later.
					if RB.type.type_id == TP_LIST && RC.type.type_id==TP_NUMBER:
						if RC.number.val < 0:
							RA = RB.list.val->items[ RB.list.val->len + (int)RC.number.val ]
						else:
							RA = RB.list.val->items[ (int)RC.number.val ]
					else:
						##print("IGET")
						##print(RC)
						RA = tp_get(tp,RB,RC)
					GA
					break
				case TP_ISET:
					if RA.type.type_id == TP_LIST:
						## if RB is not a number, then there is a user level bug, lists are only indexed by integers
						if RB.type.type_id==TP_NUMBER && RC.type.type_id==TP_NUMBER:
							if RB.number.val < 0:
								RA.list.val->items[ RA.list.val->len + (int)RB.number.val ] = RC
							else:
								RA.list.val->items[ (int)RB.number.val ] = RC
						else:
							RA = tp_set(tp,RA,RB,RC)
					elif RA.type.type_id == TP_OBJECT and RB.type.type_id==TP_STRING_TINY:
						if RB.type.type_id == TP_STRING_TINY:
							if RB.type.magic == TP_STRING_MAGIC_HASH:
								tpd_dict_hashsetx(tp, RA.dict.val, RB.str.val[11], RB, RC)
							else:
								tpd_dict_hashsetx(tp, RA.dict.val, tp_hash(tp, RB), RB, RC)
						else:
							tpd_dict_hashsetx(tp, RA.dict.val, tp_hash(tp, RB), RB, RC)
						if RC.type.type_id >= TP_GC_TRACKED:
							tp_grey(tp, RC)
					else:
						RA = tp_set(tp,RA,RB,RC)
					break
				case TP_INE: RA = tp_number(tp_cmp(tp,RB,RC)!=0); break;
				case TP_INOT: RA = tp_number(!tp_true(tp,RB)); break;
				case TP_IIFN: if (!tp_true(tp,RA)) { cur += 1; } break;
				case TP_IITER:
					if RC.number.val < tp_len(tp,RB).number.val:
						RA = tp_iter(tp,RB,RC); GA;
						RC.number.val += 1
						cur += 1
					break
				case TP_IHAS: RA = tp_has(tp,RB,RC); break;
				case TP_IIGET: tp_iget(tp,&RA,RB,RC); break;
				case TP_IDEL: tp_del(tp,RA,RB); break;
				case 177:
					if defined(DEBUG):
						std::cout << "new interface with name = " << RB << std::endl;
						std::cout << "and base = " << __globals256__[VC] << std::endl;
					RA = tp_interface_with_name_and_base(tp, RB, __globals256__[VC])
					break;
				case TP_IIFACE:
					##RA = tp_interface_from_items(tp, VC/2, &RB);  ## DEPRECATED
					if defined(DEBUG):
						std::cout << "new interface with name = " << RB << std::endl;
					RA = tp_interface_with_name(tp, RB)
					break;
				case TP_IDICT: RA = tp_dict_from_items(tp, VC/2, &RB); break;
				case TP_ILIST: RA = tp_list_from_items(tp, VC, &RB); break;
				case TP_IPARAMS:
					if defined(DEBUG) or defined(DEBUG_CALLS):
						print("	PARAMS: result - RA = ", RA)
						print("	PARAMS: nargs  - VC = ", VC)
						##crashes sometimes?##print("	PARAMS: args[] - RB = ", &RB)
					RA = tp_params_n(tp,VC,&RB);
					break;
				case 169:
					if defined(TINY_LIST_PARAMS):
						if RB.lst.val->next(&RA) == false:
							print(RB)
							throw "params list iter error"
						##################################
					else:
						throw "TINY_LIST_PARAMS is not enabled"						
					break;
				case TP_ILEN:
					RA = tp_len(tp,RB); break;
				case TP_IJUMP:
					cur += SVBC; continue; break;
				case TP_ISETJMP:
					f->jmp = SVBC?cur+SVBC:0; break;
				case TP_ICALL:
					if defined(DEBUG) or defined(DEBUG_CALLS):
						print("calling on type = ", RB.type.type_id)
						print(RB)
					f->cur = cur + 1
					RA = tp_call(tp,RB,RC)
					GA
					return 0
					break
				case TP_IDEF:
					if defined(DEBUG) or defined(DEBUG_CALLS):
						print("TP_IDEF new function decl")
					int a = (*(cur+1)).string.val - tp_string_getptr(f->code)
					if(tp_string_getptr(f->code)[a] == ';') throw "TP_IDEF if(tp_string_getptr(f->code)[a] == ';')";
					RA = tp_def(
					  tp,
					  tp_string_view(tp, f->code, a, a + (SVBC-1)*4),
					  ##f->globals);
					  tp->globals);
					cur += SVBC
					continue;
					break;
				case TP_IRETURN: tp_return(tp,RA); SR(0); break;
				case TP_IRAISE: _tp_raise(tp,RA); SR(0); break;
				case TP_INONE: RA = tp_None; break;
				case TP_IMOD:  RA = tp_mod(tp,RB,RC); break;
				case TP_ILSH:  RA = tp_lsh(tp,RB,RC); break;
				case TP_IRSH:  RA = tp_rsh(tp,RB,RC); break;
				case TP_IPOW: RA = tp_pow(tp,RB,RC); break;
				case TP_IBITAND: RA = tp_bitwise_and(tp,RB,RC); break;
				case TP_IBITOR:  RA = tp_bitwise_or(tp,RB,RC); break;
				case TP_IBITNOT:  RA = tp_bitwise_not(tp,RB); break;
				case TP_IBITXOR:  RA = tp_bitwise_xor(tp,RB,RC); break;
				case TP_IPASS: break;
				case TP_IFILE:
					if defined(DEBUG):
						f->fname = RA
					break
				case TP_IDEBUG:
					print("BYTECODE DEBUG:")
					print("VA: ", VA)
					print("RA: ", RA)
					break
				case TP_ILINE:
					if defined(DEBUG):
						print("TP_ILINE - get and set current source line")
					int a = (*(cur+1)).string.val - tp_string_getptr(f->code)
					if(tp_string_getptr(f->code)[a] == ';') throw "TP_ILINE if(tp_string_getptr(f->code)[a] == ';')";
					std::cout << "line: " << cOrange << (*(cur+1)).string.val <<  cNone << std::endl;
					cur += VA
					if defined(DEBUG):
						f->line = tp_string_view(tp, f->code, a, a+VA*4-1)
						f->lineno = UVBC
					break;
				case 200:
					## fast global function call - no args
					if defined(DEBUG) or defined(DEBUG_CALLS):
						print("^^^^^^^^^^^^^fast global call (args:0) ^^^^^^^^^^^^^")
						print("fast call func type:", __globals256__[ VB ].type.type_id)
						print("fast call func magic:", __globals256__[ VB ].type.magic)
					f->cur = cur + 1
					tp_obj dest = tp_None
					##tp_enter_frame(tp, __globals256__[ VB ], &dest)
					tp_enter_frame(tp, __globals256__[ VB ].func.info->code, &dest)
					tp_run_frame(tp)
					RA = dest
					GA
					return 0
					break
				case 201:
					## fast global function call - single arg
					if defined(DEBUG) or defined(DEBUG_CALLS):
						print("^^^^^^^^^^^^^fast global call (args:1) ^^^^^^^^^^^^^")
						print("fast call func type:", __globals256__[ VB ].type.type_id)
						print("fast call func magic:", __globals256__[ VB ].type.magic)
					f->cur = cur + 1
					tp_obj dest = tp_None
					##tp_enter_frame(tp, __globals256__[ VB ], &dest)
					tp_enter_frame(tp, __globals256__[ VB ].func.info->code, &dest)
					tp->frames[tp->cur].regs[0] = RC
					tp_run_frame(tp)
					RA = dest
					GA
					return 0
					break
				default:
					if e.i >= 180 and e.i < 200:
						if defined(DEBUG) or defined(DEBUG_CALLS):
							print("^^^^^^^^^^^^^fast method call (args:n) ^^^^^^^^^^^^^")
							print("fast call func type:", RB.type.type_id)
							print("fast call func magic:", RB.type.magic)
						f->cur = cur + 1
						tp_obj dest = tp_None
						##tp_enter_frame(tp, RB, &dest)
						tp_enter_frame(tp, RB.func.info->code, &dest)
						for i in range(e.i-180):
							tp->frames[tp->cur].regs[i] = regs[ VC + i ]
						tp_run_frame(tp)
						RA = dest
						GA
						return 0
						break
					elif e.i >= 202 and e.i < 232:
						## fast global function call - up to 29 args
						if defined(DEBUG) or defined(DEBUG_CALLS):
							print("^^^^^^^^^^^^^fast global call (args:n) ^^^^^^^^^^^^^")
							print("fast call func type:", __globals256__[ VB ].type.type_id)
							print("fast call func magic:", __globals256__[ VB ].type.magic)
						f->cur = cur + 1
						tp_obj dest = tp_None
						if __globals256__[ VB ].type.type_id == TP_FUNC:
							##tp_enter_frame(tp, __globals256__[ VB ], &dest)
							tp_enter_frame(tp, __globals256__[ VB ].func.info->code, &dest)
						else:
							## support calling a parent class constructor from a subclass, like: `BaseClass.__init__(self,...)`
							tp_obj __init__ = None
							##tp_obj k = tp_string_tiny_atom("__init__")
							tp_obj k = ATOM_INIT
							if tp_vget(tp, __globals256__[ VB ], k, &__init__, 0):
								##tp_enter_frame(tp, __init__, 0)
								tp_enter_frame(tp, __init__.func.info->code, &dest)
							else:
								print(__globals256__[ VB ])
								throw "error calling a base class `__init__` constructor"
						for i in range(e.i-200):
							tp->frames[tp->cur].regs[i] = regs[ VC + i ]
						tp_run_frame(tp)
						RA = dest
						GA
						return 0
						break
					elif e.i >= 232:
						## fast construct class
						if defined(DEBUG) or defined(DEBUG_CALLS):
							print("^^^^^^^^^^^^^fast construct class (args:n) ^^^^^^^^^^^^^")
							print("fast call func type:", __globals256__[ VB ].type.type_id)
							print("fast call func magic:", __globals256__[ VB ].type.magic)
						f->cur = cur + 1
						tp_obj iface = __globals256__[ VB ]
						##tp_obj __init__ = tp_dict_get(tp, iface, tp_string_atom(tp,"__init__"))
						tp_obj __init__ = None
						tp_obj self = tp_object(tp)
						self.obj.info->meta = iface
						tp_obj k = ATOM_INIT
						##int ihash = tp_hash(tp, k)
						##int n = tpd_dict_hashfind(tp, iface.dict.val, ihash, k)
						##if n < 0:
						##	tp_obj __base__ = tp_dict_get(tp, iface, tp_string_atom(tp,"__base__"))
						##	n = tpd_dict_hashfind(tp, __base__.dict.val, ihash, k)
						##	if n < 0:
						##		print(__base__)
						##		throw "can not find __init__ method on base class"
						##	else:
						##		__init__ = tpd_dict_get(tp, __base__.dict.val, n)
						##else:
						##	__init__ = tpd_dict_get(tp, iface.dict.val, n)
						if tp_vget(tp, iface, k, &__init__, 0):
							tp_enter_frame(tp, __init__.func.info->code, 0)
							tp->frames[tp->cur].regs[0] = self
							if e.i > 232:
								for i in range(e.i-232):
									tp->frames[tp->cur].regs[i+1] = regs[ VC + i ]
							tp_run_frame(tp)
						if defined(DEBUG) or defined(DEBUG_CALLS):
							print("-----------made new instance--------")
							print(self)
							print("_________________")
						RA = self
						GA
						return 0
						break
					else:
						printf("INVALID BYTE CODE: %i \n", e.i);
						tp_raise(0,tp_string_atom(tp, "tp_step RuntimeError: invalid instruction"));
					break;
		#ifdef TP_SANDBOX
		  tp_time_update(tp)
		  tp_mem_update(tp)
		  tp_bounds(tp,cur,1)
		#endif
		cur += 1
	SR(0)


## Function: tp_exec
## Execute VM code.

def tp_exec(TP, tp_obj code) ->tp_obj:
	tp_obj r = tp_None
	tp_enter_frame(tp, code, &r)
	tp_run_frame(tp)
	return r

def tp_eval_from_cstr(TP, const char *text, tp_obj globals) ->tp_obj:
	tp_obj code = tp_compile(tp, tp_string_atom(tp, text), tp_string_atom(tp, "<eval>"))
	tp_exec(tp,code)
	return tp->last_result

