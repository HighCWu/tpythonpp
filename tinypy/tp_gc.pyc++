## tp_obj tp_track(TP,tp_obj v) { return v; }
## void tp_grey(TP,tp_obj v) { }
## void tp_full(TP) { }
## void tp_gc_init(TP) { }
## void tp_gc_deinit(TP) { }
## void tp_delete(TP,tp_obj v) { }

## this is called alot
def tp_grey(TP, tp_obj v):
	#if DEBUG > 5
	  std::cout << "tp_gc.cpp tp_grey" << std::endl;
	#endif
	if v.type.type_id < TP_GC_TRACKED:
		## TODO this should print a warning
		return
	if v.type.type_id == TP_STRING:
		## TODO the v.string.info pointer still needs to be freed for both extern and string views
		## note should copy the bytes from the code object, because it gets freed later.
		## TODO string literals should not be using extern or view at all.
		if v.type.magic == TP_STRING_EXTERN:
			return
		elif v.type.magic == TP_STRING_VIEW:
			return
	if ((!v.gc.gci) || *v.gc.gci) { return; }
	## this unsafe union hackery is probably what crashes tpd_dict when its struct order is changed
	*v.gc.gci = 1;
	## need to follow the referents
	tpd_list_appendx(tp, tp->grey, v)


def tp_follow(TP,tp_obj v):
	#if DEBUG > 4
	  std::cout << "tp_gc.cpp tp_follow" << std::endl;
	#endif
	int type = v.type.type_id
	##if type == TP_STRING && v.type.magic == TP_STRING_VIEW:
	##	tp_grey(tp, v.string.info->base)
	if type == TP_LIST:
		int n
		for (n=0; n<v.list.val->len; n++):
			tp_grey(tp,v.list.val->items[n])
	if type == TP_DICT:
		int i
		for (i=0; i<v.dict.val->len; i++):
			##int n = tpd_dict_next(tp,v.dict.val)
			if v.dict.val->items[i].used < 1:
				continue
			tp_grey(tp,v.dict.val->items[i].key)
			tp_grey(tp,v.dict.val->items[i].val)
	if type >= TP_HAS_META:
		tp_grey(tp, v.obj.info->meta)
	if type == TP_FUNC:
		tp_grey(tp,v.func.info->instance)
		tp_grey(tp,v.func.info->globals)
		tp_grey(tp,v.func.info->code)


## if called after a sweep, at this point
## white is the list of reachable objects;
## black shall be empty and will capture newly produced reachable objects

def tp_reset(TP):
	int n
	tpd_list *tmp
	for (n=0; n<tp->black->len; n++):
		*tp->black->items[n].gc.gci = 0
	tmp = tp->white
	tp->white = tp->black
	tp->black = tmp

def tp_gc_init(TP):
	tp->white = tpd_list_new(tp)
	tp->grey = tpd_list_new(tp)
	tp->black = tpd_list_new(tp)
	tp->steps = 0


def tp_gc_deinit(TP):
	tpd_list_free(tp, tp->white)
	tpd_list_free(tp, tp->grey)
	tpd_list_free(tp, tp->black)


def tp_delete(TP, tp_obj v):
	#if DEBUG > 3
	  std::cout << "tp_gc.cpp tp_delete" << std::endl;
	#endif
	int type = v.type.type_id
	if type == TP_LIST:
		#if DEBUG > 3
		  std::cout << "  GC FREE LIST" << std::endl;
		#endif
		tpd_list_free(tp, v.list.val)
		return;
	elif type == TP_DICT || type == TP_INTERFACE || type == TP_OBJECT:
		if defined(DEBUG):
			print(DPURPLE, "  GC FREE DICT/INTERFACE/OBJECT")
		tpd_dict_free(tp, v.dict.val)
		return
	elif type == TP_STRING:
		#ifdef DEBUG
		if v.type.magic == TP_STRING_NONE:
			std::cout << "  GC FREE STRING NONE" << std::endl;
			tp_free(tp, v.string.info->s)
		else:
			std::cout << "  GC FREE STRING: " << std::endl;
			std::cout << v.string.info->s << std::endl;
		#endif
		tp_free(tp, v.string.info)
		return
	##elif type == TP_DATA:
	##	if v.data.info->free:
	##		v.data.info->free(tp,v)
	##	tp_free(tp, v.data.info)
	##	return
	elif type == TP_FUNC:
		#if DEBUG > 3
		  std::cout << "  GC FREE FUNC" << std::endl;
		#endif
		tp_free(tp, v.func.info)
		return
	//tp_raise(, tp_string_atom(tp, "(tp_delete) TypeError: ?"));
	std::cout << "ERROR: bad type to free: " << type << std::endl;
	throw "ERROR in tp_gc.cpp:tp_delete unable to free unexpected type!"


def tp_collect(TP):
	#ifdef DEBUG
	  std::cout << "tp_gc.cpp tp_collect" << std::endl;
	#endif
	int n;
	for (n=0; n<tp->white->len; n++):
		tp_obj r = tp->white->items[n]
		if (*r.gc.gci) { continue; }
		tp_delete(tp,r)
	tp->white->len = 0
	tp_reset(tp)


def _tp_gcinc(TP):
	tp_obj v
	if not tp->grey->len:
		return
	v = tpd_list_pop(tp, tp->grey, tp->grey->len-1, "_tp_gcinc")
	tp_follow(tp,v)
	tpd_list_appendx(tp, tp->black, v)


def tp_full(TP):
	#ifdef DEBUG
	  std::cout << "tp_gc.cpp tp_full" << std::endl;
	#endif
	while tp->grey->len:
		_tp_gcinc(tp)
	tp_collect(tp)
	tp_follow(tp,tp->root)


def tp_gcinc(TP):
	#if DEBUG > 4
	  std::cout << "tp_gc.cpp tp_gcinc" << std::endl;
	#endif
	tp->steps += 1
	if tp->steps < TP_GCMAX || tp->grey->len > 0:
		## follow two objects every one new object is tracked
		_tp_gcinc(tp); _tp_gcinc(tp)
	if tp->steps < TP_GCMAX || tp->grey->len > 0:
		return
	tp->steps = 0
	tp_full(tp)
	return


def tp_track(TP,tp_obj v) ->tp_obj:
	#if DEBUG > 1
	  std::cout << "tp_gc.cpp tp_track" << std::endl;
	  std::cout << tp_as_string(tp, v) << std::endl;
	  std::cout << "-------------------" << std::endl;
	#endif
	tp_gcinc(tp)
	tp_grey(tp,v)
	return v


