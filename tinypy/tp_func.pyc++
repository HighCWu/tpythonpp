
## TODO why is this def empty?
tp_obj tp_call_extern(TP, tp_obj func) {}

def tp_func_nt(TP, int t, void *v, tp_obj c, tp_obj s, tp_obj g) ->tp_obj:
	tp_obj r = {TP_FUNC};
	tpd_func *info = (tpd_func*)tp_malloc(tp, sizeof(tpd_func))
	info->code = c
	info->instance = s
	##info->globals = g
	r.type.magic = t
	r.func.info = info
	##r.func.cfnc = v
	info->cfunc = v
	return r


def tp_func_t(TP, int t, void *v, tp_obj c, tp_obj s, tp_obj g) ->tp_obj:
	return tp_track(tp, tp_func_nt(tp, t, v, c, s, g))


def tp_bind(TP, tp_obj function, tp_obj self) ->tp_obj:
	##return tp_func_t(
	##  tp,
	##  function.type.magic | TP_FUNC_MASK_METHOD,
	##  ##function.func.cfnc,
	##  function.func.info->cfunc,
	##  function.func.info->code,
	##  self,
	##  function.func.info->globals);
	function.func.info->instance=self
	function.type.magic |= TP_FUNC_MASK_METHOD
	return function

def tp_def(TP, tp_obj code, tp_obj g) ->tp_obj:
	return tp_func_t(tp,1,0,code,tp_None,g)


## Function: tp_func
## Creates a new tinypy function object.
## 
## This is how you can create a tinypy function object which, when called in
## the script, calls the provided C function.

def tp_function(TP, tp_obj v(TP)) ->tp_obj:
	return tp_func_t(
	  tp,0,
	  (void*)v,  // function pointer `tp_obj (*)(tp_vm*)`
	  tp_None,tp_None,tp_None);


def tp_method(TP,tp_obj self, tp_obj v(TP)) ->tp_obj:
	return tp_func_t(
	  tp,2,
	  (void*)v,
	  tp_None,self,tp_None);


## c++11 lambda support
## example:
##	std::function<tp_obj(tp_vm*)> myfunction = [=](tp_vm *t){return pointer->bar(t);};

def tp_function(TP, std::function<tp_obj(tp_vm*)> func) ->tp_obj:
	tp_obj r = {TP_FUNC};
	tpd_func *info = (tpd_func*)tp_malloc(tp, sizeof(tpd_func))
	info->code = None
	info->instance = None
	##info->globals = None
	info->cppfunc = func
	r.type.magic = TP_FUNC_MASK_CPP
	r.func.info = info
	tp_track(tp, r)
	return r


def tp_method(TP, tp_obj self, std::function<tp_obj(tp_vm*)> func) ->tp_obj:
	tp_obj r = {TP_FUNC};
	tpd_func *info = (tpd_func*)tp_malloc(tp, sizeof(tpd_func))
	info->code = None
	info->instance = self
	##info->globals = None
	info->cppfunc = func
	r.type.magic = TP_FUNC_MASK_METHOD_CPP
	r.func.info = info
	tp_track(tp, r)
	return r

