## File: Dict
## Functions for dealing with dictionaries.

def tpd_lua_hash(void const *v,int l) ->int:
	int i,step = (l>>5)+1
	int h = l + (l >= 4?*(int*)v:0)
	for (i=l; i>=step; i-=step):
		h = h^((h<<5)+(h>>2)+((unsigned char *)v)[i-1])
	return h

def tp_hash_tiny_string(char s[12]) ->int:
	int h = s[0]
	for i in range(12):
		if s[i]=='\0':
			break
		##h += (s[i] + 50) ## note with a hash function this simple, the builtins `dir` and `len` will collide
		## quick fixes ##
		if s[i]=='g' and i==0:
			h += (s[i] * 512) + 100099
		elif s[i]=='s' and i==0:
			h += (s[i] * 256) + 999
		elif s[i]=='d':
			h += (s[i] * 128) + i
		elif s[i]=='i':
			h += (s[i] * 64) - i
		elif s[i]=='r':
			h += (s[i] * 32) + i
		else:
			h += s[i] + i
	if defined(DEBUG):
		print("tp_hash_tiny_string ", h)
	return h

def tp_hash(TP, tp_obj v) ->int:
	switch v.type.type_id:
		case TP_NONE: return 0
		case TP_NUMBER: return tpd_lua_hash(&v.number.val, sizeof(tp_num))
		case TP_STRING: return tpd_lua_hash(tp_string_getptr(v), tp_string_len(v))
		case TP_STRING_ATOMIC:
			return tpd_lua_hash(tp_string_getptr(v), tp_string_len(v))
		case TP_STRING_TINY:
			if defined(DEBUG):
				print(v)
			return tp_hash_tiny_string(v.str.val)
		case TP_DICT:
			return tpd_lua_hash(&v.dict.val, sizeof(void*))
		case TP_LIST:
			int r = v.list.val->len
			int n
			for(n=0; n<v.list.val->len; n++):
				tp_obj vv = v.list.val->items[n]
				r += (vv.type.type_id != TP_LIST) ? tp_hash(tp, v.list.val->items[n]) : tpd_lua_hash(&vv.list.val, sizeof(void*))
			return r
		case TP_FUNC: return tpd_lua_hash(&v.func.info, sizeof(void*))
		##case TP_DATA: return tpd_lua_hash(&v.data.val, sizeof(void*))
	//tp_raise(0, tp_string_atom(tp, "(tp_hash) TypeError: value unhashable"));
	std::cout << "tp_hash ERROR unexpected type: " << v.type.type_id << std::endl
	throw "ERROR in tp_hash.cpp invalid type to hash"


